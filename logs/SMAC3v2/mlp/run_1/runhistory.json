{
  "stats": {
    "submitted": 389,
    "finished": 389,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      2.7777777777777777,
      0.23093160012380076,
      1.0288937091827393,
      1,
      1677764110.1091738,
      1677764111.1387389,
      {}
    ],
    [
      2,
      null,
      209652396,
      2.7777777777777777,
      0.7100479727638502,
      0.26693177223205566,
      1,
      1677764110.1366348,
      1677764110.4045615,
      {}
    ],
    [
      3,
      null,
      209652396,
      2.7777777777777777,
      0.0628814608480347,
      0.2716543674468994,
      1,
      1677764110.1697485,
      1677764110.4426422,
      {}
    ],
    [
      4,
      null,
      209652396,
      2.7777777777777777,
      0.8992773135252244,
      1.5456788539886475,
      1,
      1677764110.205335,
      1677764111.7518115,
      {}
    ],
    [
      5,
      null,
      209652396,
      2.7777777777777777,
      0.8447369235530795,
      0.10628271102905273,
      1,
      1677764110.2437258,
      1677764110.3513002,
      {}
    ],
    [
      6,
      null,
      209652396,
      2.7777777777777777,
      0.07458062519343867,
      0.21132183074951172,
      1,
      1677764110.2887638,
      1677764110.50121,
      {}
    ],
    [
      7,
      null,
      209652396,
      2.7777777777777777,
      0.14246672856700704,
      0.12518572807312012,
      1,
      1677764110.3391204,
      1677764110.4649587,
      {}
    ],
    [
      8,
      null,
      209652396,
      2.7777777777777777,
      0.35391519653358094,
      0.1849970817565918,
      1,
      1677764110.3747375,
      1677764110.5604286,
      {}
    ],
    [
      9,
      null,
      209652396,
      2.7777777777777777,
      0.36563138347260904,
      0.11036157608032227,
      1,
      1677764110.4329767,
      1677764110.5446558,
      {}
    ],
    [
      10,
      null,
      209652396,
      2.7777777777777777,
      0.7145481275147013,
      0.1117410659790039,
      1,
      1677764110.7649522,
      1677764110.877471,
      {}
    ],
    [
      11,
      null,
      209652396,
      2.7777777777777777,
      0.6594305168678427,
      0.17567133903503418,
      1,
      1677764110.817481,
      1677764110.9938684,
      {}
    ],
    [
      12,
      null,
      209652396,
      2.7777777777777777,
      0.42904209223150724,
      0.16704869270324707,
      1,
      1677764110.8556454,
      1677764111.0232985,
      {}
    ],
    [
      13,
      null,
      209652396,
      2.7777777777777777,
      0.3928845558650572,
      0.21010947227478027,
      1,
      1677764110.8882198,
      1677764111.09916,
      {}
    ],
    [
      14,
      null,
      209652396,
      2.7777777777777777,
      0.7573816155988858,
      0.08876729011535645,
      1,
      1677764110.922397,
      1677764111.0117788,
      {}
    ],
    [
      15,
      null,
      209652396,
      2.7777777777777777,
      0.5175363664500154,
      0.14129877090454102,
      1,
      1677764110.955371,
      1677764111.0972314,
      {}
    ],
    [
      16,
      null,
      209652396,
      2.7777777777777777,
      0.6455199628597957,
      0.7377424240112305,
      1,
      1677764110.996585,
      1677764111.7349167,
      {}
    ],
    [
      17,
      null,
      209652396,
      2.7777777777777777,
      0.7067270194986073,
      0.5038797855377197,
      1,
      1677764111.0367162,
      1677764111.54147,
      {}
    ],
    [
      18,
      null,
      209652396,
      2.7777777777777777,
      0.8870411637264005,
      0.2372736930847168,
      1,
      1677764111.3679972,
      1677764111.6060386,
      {}
    ],
    [
      19,
      null,
      209652396,
      2.7777777777777777,
      0.4168136799752399,
      0.09021353721618652,
      1,
      1677764111.413732,
      1677764111.504691,
      {}
    ],
    [
      20,
      null,
      209652396,
      2.7777777777777777,
      0.3032915506035283,
      0.7624609470367432,
      1,
      1677764111.4452686,
      1677764112.2084513,
      {}
    ],
    [
      21,
      null,
      209652396,
      2.7777777777777777,
      0.9193314763231197,
      0.32636499404907227,
      1,
      1677764111.4806201,
      1677764111.8075693,
      {}
    ],
    [
      22,
      null,
      209652396,
      2.7777777777777777,
      0.8091070875889818,
      0.10560178756713867,
      1,
      1677764111.5211277,
      1677764111.6273437,
      {}
    ],
    [
      23,
      null,
      209652396,
      2.7777777777777777,
      0.3548204890126895,
      1.089179515838623,
      1,
      1677764111.5681293,
      1677764112.6579034,
      {}
    ],
    [
      24,
      null,
      209652396,
      2.7777777777777777,
      0.09181832250077382,
      0.49414873123168945,
      1,
      1677764111.6203828,
      1677764112.115426,
      {}
    ],
    [
      25,
      null,
      209652396,
      2.7777777777777777,
      0.9009470752089137,
      0.07653546333312988,
      1,
      1677764111.667697,
      1677764111.7451038,
      {}
    ],
    [
      26,
      null,
      209652396,
      2.7777777777777777,
      0.21991798204890123,
      0.19939017295837402,
      1,
      1677764111.7119892,
      1677764111.911968,
      {}
    ],
    [
      27,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.268648624420166,
      1,
      1677764112.0211537,
      1677764112.2905252,
      {}
    ],
    [
      28,
      null,
      209652396,
      2.7777777777777777,
      0.24428969359331476,
      0.23456263542175293,
      1,
      1677764112.0628083,
      1677764112.298092,
      {}
    ],
    [
      29,
      null,
      209652396,
      2.7777777777777777,
      0.1808310120705663,
      0.19271349906921387,
      1,
      1677764112.0925581,
      1677764112.2860224,
      {}
    ],
    [
      30,
      null,
      209652396,
      2.7777777777777777,
      0.13464716805942434,
      0.17912769317626953,
      1,
      1677764112.121655,
      1677764112.3014839,
      {}
    ],
    [
      31,
      null,
      209652396,
      2.7777777777777777,
      0.9015041782729805,
      0.19080424308776855,
      1,
      1677764112.1501558,
      1677764112.3415465,
      {}
    ],
    [
      32,
      null,
      209652396,
      2.7777777777777777,
      0.8798297740637574,
      0.23962998390197754,
      1,
      1677764112.196374,
      1677764112.4366772,
      {}
    ],
    [
      33,
      null,
      209652396,
      2.7777777777777777,
      0.4557845868152275,
      1.9898433685302734,
      1,
      1677764112.2515347,
      1677764114.2423978,
      {}
    ],
    [
      34,
      null,
      209652396,
      2.7777777777777777,
      0.25986691426802844,
      0.3006415367126465,
      1,
      1677764112.3323522,
      1677764112.6337214,
      {}
    ],
    [
      35,
      null,
      209652396,
      2.7777777777777777,
      0.8987202104611576,
      0.12504935264587402,
      1,
      1677764112.3808076,
      1677764112.5064259,
      {}
    ],
    [
      36,
      null,
      209652396,
      2.7777777777777777,
      0.07568709377901572,
      0.9370517730712891,
      1,
      1677764112.6965487,
      1677764113.634072,
      {}
    ],
    [
      37,
      null,
      209652396,
      2.7777777777777777,
      0.20310894459919537,
      0.30857229232788086,
      1,
      1677764112.7408235,
      1677764113.050096,
      {}
    ],
    [
      38,
      null,
      209652396,
      2.7777777777777777,
      0.9003899721448468,
      0.23423051834106445,
      1,
      1677764112.769085,
      1677764113.0038915,
      {}
    ],
    [
      39,
      null,
      209652396,
      2.7777777777777777,
      0.08568554627050451,
      0.34618139266967773,
      1,
      1677764112.7970958,
      1677764113.1438699,
      {}
    ],
    [
      40,
      null,
      209652396,
      2.7777777777777777,
      0.0940482822655524,
      0.6152567863464355,
      1,
      1677764112.828022,
      1677764113.4440196,
      {}
    ],
    [
      41,
      null,
      209652396,
      2.7777777777777777,
      0.06733828536056952,
      0.3080728054046631,
      1,
      1677764112.863348,
      1677764113.172207,
      {}
    ],
    [
      42,
      null,
      209652396,
      2.7777777777777777,
      0.06565923862581236,
      0.18722748756408691,
      1,
      1677764112.9021893,
      1677764113.0900295,
      {}
    ],
    [
      43,
      null,
      209652396,
      2.7777777777777777,
      0.8580609718353451,
      0.9200339317321777,
      1,
      1677764113.0449946,
      1677764113.9659822,
      {}
    ],
    [
      44,
      null,
      209652396,
      2.7777777777777777,
      0.06566233364283502,
      0.31617045402526855,
      1,
      1677764113.0889668,
      1677764113.4057043,
      {}
    ],
    [
      3,
      null,
      209652396,
      8.333333333333332,
      0.04953729495512216,
      0.6263422966003418,
      1,
      1677764113.128316,
      1677764113.7552528,
      {}
    ],
    [
      6,
      null,
      209652396,
      8.333333333333332,
      0.04119312906220984,
      0.6343543529510498,
      1,
      1677764113.1853466,
      1677764113.8202724,
      {}
    ],
    [
      7,
      null,
      209652396,
      8.333333333333332,
      0.05732281027545638,
      0.3062000274658203,
      1,
      1677764113.2215347,
      1677764113.528683,
      {}
    ],
    [
      9,
      null,
      209652396,
      8.333333333333332,
      0.12129681213246679,
      0.2861921787261963,
      1,
      1677764113.454208,
      1677764113.7413626,
      {}
    ],
    [
      13,
      null,
      209652396,
      8.333333333333332,
      0.10906375735066542,
      0.5516843795776367,
      1,
      1677764113.4926467,
      1677764114.0453315,
      {}
    ],
    [
      12,
      null,
      209652396,
      8.333333333333332,
      0.17025069637883006,
      0.4190399646759033,
      1,
      1677764113.5707443,
      1677764113.9904056,
      {}
    ],
    [
      24,
      null,
      209652396,
      8.333333333333332,
      0.05731197771587748,
      1.764265537261963,
      1,
      1677764113.6851404,
      1677764115.4500868,
      {}
    ],
    [
      26,
      null,
      209652396,
      8.333333333333332,
      0.04118229650263083,
      0.65682053565979,
      1,
      1677764113.792593,
      1677764114.4503868,
      {}
    ],
    [
      20,
      null,
      209652396,
      8.333333333333332,
      0.10351284432064367,
      1.635028600692749,
      1,
      1677764113.850126,
      1677764115.4857838,
      {}
    ],
    [
      45,
      null,
      209652396,
      2.7777777777777777,
      0.07066542865985759,
      0.18383145332336426,
      1,
      1677764114.2328966,
      1677764114.417703,
      {}
    ],
    [
      46,
      null,
      209652396,
      2.7777777777777777,
      0.06956360259981431,
      0.22290730476379395,
      1,
      1677764114.2836485,
      1677764114.5072672,
      {}
    ],
    [
      47,
      null,
      209652396,
      2.7777777777777777,
      0.06399257195914565,
      0.21694707870483398,
      1,
      1677764114.3323517,
      1677764114.5500197,
      {}
    ],
    [
      48,
      null,
      209652396,
      2.7777777777777777,
      0.06176880222841219,
      0.34268879890441895,
      1,
      1677764114.3675985,
      1677764114.7111402,
      {}
    ],
    [
      49,
      null,
      209652396,
      2.7777777777777777,
      0.8269065304859177,
      0.3272254467010498,
      1,
      1677764114.3995278,
      1677764114.727353,
      {}
    ],
    [
      50,
      null,
      209652396,
      2.7777777777777777,
      0.9031723924481585,
      1.0555551052093506,
      1,
      1677764114.4567177,
      1677764115.5128555,
      {}
    ],
    [
      51,
      null,
      209652396,
      2.7777777777777777,
      0.1157489941194676,
      0.3870556354522705,
      1,
      1677764114.5029445,
      1677764114.890993,
      {}
    ],
    [
      52,
      null,
      209652396,
      2.7777777777777777,
      0.8714825131538224,
      0.05674862861633301,
      1,
      1677764114.54639,
      1677764114.6037412,
      {}
    ],
    [
      53,
      null,
      209652396,
      2.7777777777777777,
      0.8992757660167131,
      0.2873971462249756,
      1,
      1677764114.5904372,
      1677764114.8786473,
      {}
    ],
    [
      6,
      null,
      209652396,
      25.0,
      0.030055710306406747,
      1.8211536407470703,
      1,
      1677764114.6451523,
      1677764116.4668796,
      {}
    ],
    [
      13,
      null,
      209652396,
      25.0,
      0.05008975549365524,
      1.0364797115325928,
      1,
      1677764114.751636,
      1677764115.7890253,
      {}
    ],
    [
      30,
      null,
      209652396,
      8.333333333333332,
      0.04841535128443186,
      0.7375204563140869,
      1,
      1677764114.799991,
      1677764115.538136,
      {}
    ],
    [
      29,
      null,
      209652396,
      8.333333333333332,
      0.048423088826988425,
      0.5413877964019775,
      1,
      1677764114.9208193,
      1677764115.4627843,
      {}
    ],
    [
      28,
      null,
      209652396,
      8.333333333333332,
      0.07678427731352533,
      0.6406142711639404,
      1,
      1677764114.9624176,
      1677764115.6036873,
      {}
    ],
    [
      42,
      null,
      209652396,
      8.333333333333332,
      0.04452181987000936,
      0.5064377784729004,
      1,
      1677764115.493448,
      1677764116.000435,
      {}
    ],
    [
      44,
      null,
      209652396,
      8.333333333333332,
      0.04397709687403284,
      1.0214862823486328,
      1,
      1677764115.5377057,
      1677764116.5600176,
      {}
    ],
    [
      41,
      null,
      209652396,
      8.333333333333332,
      0.046750232126276714,
      0.7288181781768799,
      1,
      1677764115.5794756,
      1677764116.3088796,
      {}
    ],
    [
      48,
      null,
      209652396,
      8.333333333333332,
      0.043409161250387074,
      0.7365143299102783,
      1,
      1677764115.6192238,
      1677764116.3562932,
      {}
    ],
    [
      47,
      null,
      209652396,
      8.333333333333332,
      0.04395852677189738,
      0.6412322521209717,
      1,
      1677764115.6578395,
      1677764116.2996805,
      {}
    ],
    [
      46,
      null,
      209652396,
      8.333333333333332,
      0.04732126276694526,
      0.5996835231781006,
      1,
      1677764115.6927662,
      1677764116.2933924,
      {}
    ],
    [
      26,
      null,
      209652396,
      25.0,
      0.024490869699783202,
      1.464914321899414,
      1,
      1677764115.826381,
      1677764117.2921238,
      {}
    ],
    [
      30,
      null,
      209652396,
      25.0,
      0.04008511296812123,
      1.5677459239959717,
      1,
      1677764116.041801,
      1677764117.6104136,
      {}
    ],
    [
      54,
      null,
      209652396,
      2.7777777777777777,
      0.23148870318786752,
      0.5215187072753906,
      1,
      1677764116.4318902,
      1677764116.9539971,
      {}
    ],
    [
      55,
      null,
      209652396,
      2.7777777777777777,
      0.8820210461157536,
      2.0616955757141113,
      1,
      1677764116.4808068,
      1677764118.5430853,
      {}
    ],
    [
      56,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.13262057304382324,
      1,
      1677764116.518557,
      1677764116.6517878,
      {}
    ],
    [
      57,
      null,
      209652396,
      2.7777777777777777,
      0.816355617455896,
      0.17378664016723633,
      1,
      1677764116.5549426,
      1677764116.7295415,
      {}
    ],
    [
      58,
      null,
      209652396,
      2.7777777777777777,
      0.20201176106468588,
      0.28044962882995605,
      1,
      1677764116.588797,
      1677764116.8700879,
      {}
    ],
    [
      59,
      null,
      209652396,
      2.7777777777777777,
      0.6555215103683071,
      2.3943591117858887,
      1,
      1677764116.6306295,
      1677764119.0258744,
      {}
    ],
    [
      60,
      null,
      209652396,
      2.7777777777777777,
      0.6750061900340452,
      0.22662901878356934,
      1,
      1677764116.6936991,
      1677764116.9213088,
      {}
    ],
    [
      61,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      1.3948307037353516,
      1,
      1677764116.7770216,
      1677764118.173125,
      {}
    ],
    [
      62,
      null,
      209652396,
      2.7777777777777777,
      0.48970752089136493,
      0.31433963775634766,
      1,
      1677764116.9203646,
      1677764117.2353158,
      {}
    ],
    [
      44,
      null,
      209652396,
      25.0,
      0.04843546889507899,
      2.092153549194336,
      1,
      1677764116.965389,
      1677764119.0581384,
      {}
    ],
    [
      48,
      null,
      209652396,
      25.0,
      0.038407613741875624,
      2.16051983833313,
      1,
      1677764117.0090299,
      1677764119.170488,
      {}
    ],
    [
      63,
      null,
      209652396,
      2.7777777777777777,
      0.16196378830083558,
      0.7661464214324951,
      1,
      1677764117.4173446,
      1677764118.184351,
      {}
    ],
    [
      64,
      null,
      209652396,
      2.7777777777777777,
      0.7712859795728877,
      0.31894350051879883,
      1,
      1677764117.4644477,
      1677764117.7842815,
      {}
    ],
    [
      65,
      null,
      209652396,
      2.7777777777777777,
      0.26602909316001244,
      2.5009796619415283,
      1,
      1677764117.6531215,
      1677764120.1549335,
      {}
    ],
    [
      66,
      null,
      209652396,
      2.7777777777777777,
      0.7913525224388734,
      0.3605198860168457,
      1,
      1677764117.83535,
      1677764118.196943,
      {}
    ],
    [
      67,
      null,
      209652396,
      2.7777777777777777,
      0.08234447539461465,
      3.0019664764404297,
      1,
      1677764118.2116616,
      1677764121.2144418,
      {}
    ],
    [
      68,
      null,
      209652396,
      2.7777777777777777,
      0.22704116372640049,
      0.5787348747253418,
      1,
      1677764118.270869,
      1677764118.8501976,
      {}
    ],
    [
      69,
      null,
      209652396,
      2.7777777777777777,
      0.9437991333952337,
      0.13193726539611816,
      1,
      1677764118.3089757,
      1677764118.4420345,
      {}
    ],
    [
      70,
      null,
      209652396,
      2.7777777777777777,
      0.8987186629526462,
      0.7722127437591553,
      1,
      1677764118.5030897,
      1677764119.2768853,
      {}
    ],
    [
      71,
      null,
      209652396,
      2.7777777777777777,
      0.2893686165273909,
      1.7429232597351074,
      1,
      1677764118.6062634,
      1677764120.350874,
      {}
    ],
    [
      72,
      null,
      209652396,
      2.7777777777777777,
      0.5503760445682452,
      0.10984420776367188,
      1,
      1677764119.219601,
      1677764119.3303924,
      {}
    ],
    [
      73,
      null,
      209652396,
      2.7777777777777777,
      0.0645527700402353,
      0.14550280570983887,
      1,
      1677764119.295301,
      1677764119.4422336,
      {}
    ],
    [
      74,
      null,
      209652396,
      2.7777777777777777,
      0.3109161250386877,
      1.4805481433868408,
      1,
      1677764119.351716,
      1677764120.8334708,
      {}
    ],
    [
      75,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.36022305488586426,
      1,
      1677764119.4360013,
      1677764119.797155,
      {}
    ],
    [
      76,
      null,
      209652396,
      2.7777777777777777,
      0.21759826679046734,
      0.33509087562561035,
      1,
      1677764119.4896963,
      1677764119.82613,
      {}
    ],
    [
      77,
      null,
      209652396,
      2.7777777777777777,
      0.30491488703187863,
      1.0925216674804688,
      1,
      1677764119.570571,
      1677764120.6645555,
      {}
    ],
    [
      78,
      null,
      209652396,
      2.7777777777777777,
      0.9198669142680285,
      0.2117607593536377,
      1,
      1677764119.6348488,
      1677764119.8481562,
      {}
    ],
    [
      79,
      null,
      209652396,
      2.7777777777777777,
      0.13459764778706285,
      1.732168197631836,
      1,
      1677764119.8749046,
      1677764121.6086836,
      {}
    ],
    [
      80,
      null,
      209652396,
      2.7777777777777777,
      0.9003899721448468,
      0.5094597339630127,
      1,
      1677764119.9725585,
      1677764120.483777,
      {}
    ],
    [
      58,
      null,
      209652396,
      8.333333333333332,
      0.06565459610027846,
      0.9735455513000488,
      1,
      1677764120.0320115,
      1677764121.007153,
      {}
    ],
    [
      54,
      null,
      209652396,
      8.333333333333332,
      0.07511451562983607,
      1.809061050415039,
      1,
      1677764120.2392745,
      1677764122.0502646,
      {}
    ],
    [
      62,
      null,
      209652396,
      8.333333333333332,
      0.17918601052305783,
      1.2289535999298096,
      1,
      1677764120.430721,
      1677764121.660752,
      {}
    ],
    [
      81,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764121.5302908,
      1677764121.5994084,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1085, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      82,
      null,
      209652396,
      2.7777777777777777,
      0.13521046115753632,
      1.6590993404388428,
      1,
      1677764121.5921943,
      1677764123.2525449,
      {}
    ],
    [
      83,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764121.6315584,
      1677764121.7402987,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1085, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      84,
      null,
      209652396,
      2.7777777777777777,
      0.24145930052615294,
      2.719113826751709,
      1,
      1677764121.692441,
      1677764124.4123795,
      {}
    ],
    [
      85,
      null,
      209652396,
      2.7777777777777777,
      0.4201578458681523,
      0.15333938598632812,
      1,
      1677764121.7474267,
      1677764121.9021056,
      {}
    ],
    [
      86,
      null,
      209652396,
      2.7777777777777777,
      0.5684261838440111,
      3.025535821914673,
      1,
      1677764121.7885058,
      1677764124.8149343,
      {}
    ],
    [
      87,
      null,
      209652396,
      2.7777777777777777,
      0.8992773135252244,
      0.22340083122253418,
      1,
      1677764121.8628933,
      1677764122.0877976,
      {}
    ],
    [
      88,
      null,
      209652396,
      2.7777777777777777,
      0.3944552770040236,
      0.44191884994506836,
      1,
      1677764121.924725,
      1677764122.3683138,
      {}
    ],
    [
      89,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764121.9979382,
      1677764122.303166,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1088, in __call__\n    while self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      67,
      null,
      209652396,
      8.333333333333332,
      0.04231197771587747,
      8.77565050125122,
      1,
      1677764122.0765502,
      1677764130.853811,
      {}
    ],
    [
      63,
      null,
      209652396,
      8.333333333333332,
      0.11017951098731038,
      4.144869565963745,
      1,
      1677764122.1551335,
      1677764126.3010235,
      {}
    ],
    [
      68,
      null,
      209652396,
      8.333333333333332,
      0.0801361807489942,
      2.2824158668518066,
      1,
      1677764122.2217767,
      1677764124.5057836,
      {}
    ],
    [
      73,
      null,
      209652396,
      8.333333333333332,
      0.03339368616527394,
      0.5033462047576904,
      1,
      1677764122.387034,
      1677764122.8920763,
      {}
    ],
    [
      79,
      null,
      209652396,
      8.333333333333332,
      0.026711544413494215,
      6.540424823760986,
      1,
      1677764122.4745228,
      1677764129.0160522,
      {}
    ],
    [
      76,
      null,
      209652396,
      8.333333333333332,
      0.08013308573197153,
      0.6846628189086914,
      1,
      1677764122.95932,
      1677764123.6456091,
      {}
    ],
    [
      58,
      null,
      209652396,
      25.0,
      0.035622098421541404,
      2.3722996711730957,
      1,
      1677764123.327757,
      1677764125.7017481,
      {}
    ],
    [
      90,
      null,
      209652396,
      2.7777777777777777,
      0.8992757660167131,
      0.14695119857788086,
      1,
      1677764124.0000303,
      1677764124.14867,
      {}
    ],
    [
      91,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764124.2213323,
      1677764124.7201488,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1085, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      92,
      null,
      209652396,
      2.7777777777777777,
      0.1764639430516869,
      0.5608668327331543,
      1,
      1677764124.5073981,
      1677764125.0693235,
      {}
    ],
    [
      93,
      null,
      209652396,
      2.7777777777777777,
      0.41454193748065615,
      2.2082488536834717,
      1,
      1677764124.6030204,
      1677764126.8123076,
      {}
    ],
    [
      94,
      null,
      209652396,
      2.7777777777777777,
      0.5782404828226555,
      0.7401382923126221,
      1,
      1677764124.792448,
      1677764125.5336566,
      {}
    ],
    [
      95,
      null,
      209652396,
      2.7777777777777777,
      0.8981631073970907,
      0.43323659896850586,
      1,
      1677764124.8821847,
      1677764125.3172781,
      {}
    ],
    [
      96,
      null,
      209652396,
      2.7777777777777777,
      0.24096564531104914,
      1.9911227226257324,
      1,
      1677764125.157488,
      1677764127.1502407,
      {}
    ],
    [
      97,
      null,
      209652396,
      2.7777777777777777,
      0.34822191272051994,
      2.520148515701294,
      1,
      1677764125.413066,
      1677764127.934932,
      {}
    ],
    [
      98,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764125.6281948,
      1677764126.0575383,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1088, in __call__\n    while self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      82,
      null,
      209652396,
      8.333333333333332,
      0.07902352212937169,
      5.701277732849121,
      1,
      1677764125.7904065,
      1677764131.4935918,
      {}
    ],
    [
      84,
      null,
      209652396,
      8.333333333333332,
      0.030047972763850295,
      7.302488088607788,
      1,
      1677764126.1284761,
      1677764133.4328606,
      {}
    ],
    [
      88,
      null,
      209652396,
      8.333333333333332,
      0.23661095636025986,
      1.4842731952667236,
      1,
      1677764126.395607,
      1677764127.8819828,
      {}
    ],
    [
      99,
      null,
      209652396,
      2.7777777777777777,
      0.11462859795728875,
      1.783466100692749,
      1,
      1677764127.0477302,
      1677764128.8322968,
      {}
    ],
    [
      100,
      null,
      209652396,
      2.7777777777777777,
      0.8130315691736305,
      0.7731378078460693,
      1,
      1677764127.2292523,
      1677764128.0034788,
      {}
    ],
    [
      101,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764127.9539013,
      1677764128.0119393,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1085, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      102,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764128.036637,
      1677764128.2285743,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1088, in __call__\n    while self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      103,
      null,
      209652396,
      2.7777777777777777,
      0.5252940266171464,
      0.17154860496520996,
      1,
      1677764128.1119442,
      1677764128.284444,
      {}
    ],
    [
      104,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764128.1615868,
      1677764128.7479615,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1088, in __call__\n    while self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      105,
      null,
      209652396,
      2.7777777777777777,
      0.8119096255029403,
      0.16587543487548828,
      1,
      1677764128.2989693,
      1677764128.4665587,
      {}
    ],
    [
      106,
      null,
      209652396,
      2.7777777777777777,
      0.11910554008047036,
      0.20721793174743652,
      1,
      1677764128.3877163,
      1677764128.5959895,
      {}
    ],
    [
      107,
      null,
      209652396,
      2.7777777777777777,
      0.781313834726091,
      0.5016965866088867,
      1,
      1677764128.5405445,
      1677764129.04336,
      {}
    ],
    [
      92,
      null,
      209652396,
      8.333333333333332,
      0.03060817084493972,
      1.2955350875854492,
      1,
      1677764128.6657379,
      1677764129.9623322,
      {}
    ],
    [
      96,
      null,
      209652396,
      8.333333333333332,
      0.1335530795419373,
      4.846712827682495,
      1,
      1677764128.8396063,
      1677764133.6879714,
      {}
    ],
    [
      97,
      null,
      209652396,
      8.333333333333332,
      0.10965026307644687,
      5.744523525238037,
      1,
      1677764128.9137151,
      1677764134.65997,
      {}
    ],
    [
      108,
      null,
      209652396,
      2.7777777777777777,
      0.8987186629526462,
      0.609586238861084,
      1,
      1677764129.5362968,
      1677764130.1473138,
      {}
    ],
    [
      109,
      null,
      209652396,
      2.7777777777777777,
      0.8998344165892912,
      1.4099643230438232,
      1,
      1677764129.608982,
      1677764131.0199025,
      {}
    ],
    [
      110,
      null,
      209652396,
      2.7777777777777777,
      0.5953775920767564,
      0.16092777252197266,
      1,
      1677764130.0488472,
      1677764130.2108207,
      {}
    ],
    [
      111,
      null,
      209652396,
      2.7777777777777777,
      0.044512534818941574,
      0.2711637020111084,
      1,
      1677764130.2205908,
      1677764130.4927378,
      {}
    ],
    [
      112,
      null,
      209652396,
      2.7777777777777777,
      0.8881352522438873,
      0.16858386993408203,
      1,
      1677764130.2860389,
      1677764130.4557064,
      {}
    ],
    [
      113,
      null,
      209652396,
      2.7777777777777777,
      0.14911482513153818,
      0.22744321823120117,
      1,
      1677764130.5197814,
      1677764130.749138,
      {}
    ],
    [
      114,
      null,
      209652396,
      2.7777777777777777,
      0.2131306097183534,
      0.11277604103088379,
      1,
      1677764130.5985289,
      1677764130.7123184,
      {}
    ],
    [
      115,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.735992431640625,
      1,
      1677764130.7834594,
      1677764131.5204108,
      {}
    ],
    [
      116,
      null,
      209652396,
      2.7777777777777777,
      0.2466326214794181,
      2.354520082473755,
      1,
      1677764130.870363,
      1677764133.226663,
      {}
    ],
    [
      67,
      null,
      209652396,
      25.0,
      0.04453265242958826,
      20.83892011642456,
      1,
      1677764130.9578772,
      1677764151.7978606,
      {}
    ],
    [
      79,
      null,
      209652396,
      25.0,
      0.02282420303311672,
      16.818598985671997,
      1,
      1677764131.0822568,
      1677764147.901892,
      {}
    ],
    [
      99,
      null,
      209652396,
      8.333333333333332,
      0.030617455896007506,
      5.646307706832886,
      1,
      1677764131.561809,
      1677764137.2091577,
      {}
    ],
    [
      106,
      null,
      209652396,
      8.333333333333332,
      0.05232281027545649,
      0.5623140335083008,
      1,
      1677764131.6563463,
      1677764132.219673,
      {}
    ],
    [
      103,
      null,
      209652396,
      8.333333333333332,
      0.4073150727329,
      0.5862164497375488,
      1,
      1677764132.2912061,
      1677764132.8784115,
      {}
    ],
    [
      117,
      null,
      209652396,
      2.7777777777777777,
      0.11741411327762297,
      0.5455176830291748,
      1,
      1677764133.2650886,
      1677764133.812143,
      {}
    ],
    [
      118,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764133.3437715,
      1677764134.519842,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1088, in __call__\n    while self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      119,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764133.498564,
      1677764133.8883476,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1088, in __call__\n    while self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      120,
      null,
      209652396,
      2.7777777777777777,
      0.5924992262457442,
      0.49329233169555664,
      1,
      1677764133.7517993,
      1677764134.2467036,
      {}
    ],
    [
      121,
      null,
      209652396,
      2.7777777777777777,
      0.5090745899102445,
      0.18823552131652832,
      1,
      1677764133.897976,
      1677764134.087292,
      {}
    ],
    [
      122,
      null,
      209652396,
      2.7777777777777777,
      0.1296502630764469,
      0.29312920570373535,
      1,
      1677764133.9831567,
      1677764134.2779975,
      {}
    ],
    [
      123,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.28429675102233887,
      1,
      1677764134.1783419,
      1677764134.4644504,
      {}
    ],
    [
      124,
      null,
      209652396,
      2.7777777777777777,
      0.8731584648715568,
      0.28374290466308594,
      1,
      1677764134.3332539,
      1677764134.6187565,
      {}
    ],
    [
      125,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.10635566711425781,
      1,
      1677764134.4160984,
      1677764134.5235002,
      {}
    ],
    [
      84,
      null,
      209652396,
      25.0,
      0.023932219127205223,
      18.557093143463135,
      1,
      1677764134.5425212,
      1677764153.1005862,
      {}
    ],
    [
      111,
      null,
      209652396,
      8.333333333333332,
      0.019481584648715633,
      0.9384970664978027,
      1,
      1677764134.6447613,
      1677764135.5849175,
      {}
    ],
    [
      113,
      null,
      209652396,
      8.333333333333332,
      0.02783039306716195,
      0.5489194393157959,
      1,
      1677764134.7263668,
      1677764135.27623,
      {}
    ],
    [
      114,
      null,
      209652396,
      8.333333333333332,
      0.07567780872794805,
      0.3570556640625,
      1,
      1677764134.8146403,
      1677764135.1742513,
      {}
    ],
    [
      117,
      null,
      209652396,
      8.333333333333332,
      0.09015320334261845,
      0.8866939544677734,
      1,
      1677764134.8937652,
      1677764135.7827396,
      {}
    ],
    [
      122,
      null,
      209652396,
      8.333333333333332,
      0.03006035283194064,
      0.6006138324737549,
      1,
      1677764135.2530062,
      1677764135.8546538,
      {}
    ],
    [
      121,
      null,
      209652396,
      8.333333333333332,
      0.3265598885793872,
      0.6978893280029297,
      1,
      1677764135.348486,
      1677764136.0474753,
      {}
    ],
    [
      92,
      null,
      209652396,
      25.0,
      0.02726864747756108,
      3.665513038635254,
      1,
      1677764135.6487548,
      1677764139.3157687,
      {}
    ],
    [
      111,
      null,
      209652396,
      25.0,
      0.018368926029093124,
      2.06205153465271,
      1,
      1677764135.8495483,
      1677764137.9132893,
      {}
    ],
    [
      126,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764136.7415102,
      1677764137.072886,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1085, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      127,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764136.833416,
      1677764137.4211633,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1085, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      128,
      null,
      209652396,
      2.7777777777777777,
      0.4625766016713092,
      0.7411103248596191,
      1,
      1677764137.1382387,
      1677764137.8812468,
      {}
    ],
    [
      129,
      null,
      209652396,
      2.7777777777777777,
      0.1719189105540082,
      0.26602649688720703,
      1,
      1677764137.2824585,
      1677764137.55006,
      {}
    ],
    [
      130,
      null,
      209652396,
      2.7777777777777777,
      0.057327452800990386,
      0.2969353199005127,
      1,
      1677764137.5098639,
      1677764137.8085318,
      {}
    ],
    [
      131,
      null,
      209652396,
      2.7777777777777777,
      0.07624729186010515,
      0.16617751121520996,
      1,
      1677764137.631242,
      1677764137.799236,
      {}
    ],
    [
      132,
      null,
      209652396,
      2.7777777777777777,
      0.9003899721448468,
      0.44499945640563965,
      1,
      1677764137.865281,
      1677764138.3119636,
      {}
    ],
    [
      133,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.32207202911376953,
      1,
      1677764137.9503093,
      1677764138.2740054,
      {}
    ],
    [
      134,
      null,
      209652396,
      2.7777777777777777,
      0.11685082017951098,
      1.4235773086547852,
      1,
      1677764138.0410993,
      1677764139.4663754,
      {}
    ],
    [
      99,
      null,
      209652396,
      25.0,
      0.02616527390900658,
      12.629927158355713,
      1,
      1677764138.1148534,
      1677764150.745762,
      {}
    ],
    [
      122,
      null,
      209652396,
      25.0,
      0.02616836892602914,
      1.9246492385864258,
      1,
      1677764138.3444428,
      1677764140.270872,
      {}
    ],
    [
      135,
      null,
      209652396,
      2.7777777777777777,
      0.07621634168987923,
      0.15492796897888184,
      1,
      1677764139.2270663,
      1677764139.3838577,
      {}
    ],
    [
      136,
      null,
      209652396,
      2.7777777777777777,
      0.15968585577220673,
      0.20323634147644043,
      1,
      1677764139.3939111,
      1677764139.5981557,
      {}
    ],
    [
      137,
      null,
      209652396,
      2.7777777777777777,
      0.5379186010523058,
      0.445828914642334,
      1,
      1677764139.4738717,
      1677764139.9207857,
      {}
    ],
    [
      138,
      null,
      209652396,
      2.7777777777777777,
      0.1719390281646549,
      0.45800137519836426,
      1,
      1677764139.552817,
      1677764140.0127497,
      {}
    ],
    [
      139,
      null,
      209652396,
      2.7777777777777777,
      0.03727793252862899,
      0.30153560638427734,
      1,
      1677764139.66477,
      1677764139.967881,
      {}
    ],
    [
      140,
      null,
      209652396,
      2.7777777777777777,
      0.47466419065304866,
      0.1203606128692627,
      1,
      1677764139.9926999,
      1677764140.1147394,
      {}
    ],
    [
      141,
      null,
      209652396,
      2.7777777777777777,
      0.03561126586196228,
      0.2898242473602295,
      1,
      1677764140.091373,
      1677764140.3828743,
      {}
    ],
    [
      142,
      null,
      209652396,
      2.7777777777777777,
      0.06177499226245753,
      0.3453369140625,
      1,
      1677764140.1611788,
      1677764140.507501,
      {}
    ],
    [
      143,
      null,
      209652396,
      2.7777777777777777,
      0.29449241720829467,
      0.33727073669433594,
      1,
      1677764140.2446957,
      1677764140.5836813,
      {}
    ],
    [
      130,
      null,
      209652396,
      8.333333333333332,
      0.03951098731043012,
      0.8423967361450195,
      1,
      1677764140.3551462,
      1677764141.1991389,
      {}
    ],
    [
      131,
      null,
      209652396,
      8.333333333333332,
      0.03450170225936233,
      0.4337317943572998,
      1,
      1677764140.4634092,
      1677764140.898699,
      {}
    ],
    [
      134,
      null,
      209652396,
      8.333333333333332,
      0.05231352522438881,
      3.9358842372894287,
      1,
      1677764140.5799828,
      1677764144.5174289,
      {}
    ],
    [
      144,
      null,
      209652396,
      2.7777777777777777,
      0.8915026307644692,
      0.5902845859527588,
      1,
      1677764141.227655,
      1677764141.8196044,
      {}
    ],
    [
      145,
      null,
      209652396,
      2.7777777777777777,
      0.9009470752089136,
      0.1663343906402588,
      1,
      1677764141.3287303,
      1677764141.4968042,
      {}
    ],
    [
      146,
      null,
      209652396,
      2.7777777777777777,
      0.8987202104611576,
      0.12374019622802734,
      1,
      1677764141.3785973,
      1677764141.503823,
      {}
    ],
    [
      147,
      null,
      209652396,
      2.7777777777777777,
      0.896496440730424,
      0.42021656036376953,
      1,
      1677764141.5733135,
      1677764141.9952066,
      {}
    ],
    [
      148,
      null,
      209652396,
      2.7777777777777777,
      0.8859068399876199,
      0.13596463203430176,
      1,
      1677764141.654524,
      1677764141.7914743,
      {}
    ],
    [
      149,
      null,
      209652396,
      2.7777777777777777,
      0.8992757660167131,
      0.22693610191345215,
      1,
      1677764141.8520744,
      1677764142.0806148,
      {}
    ],
    [
      150,
      null,
      209652396,
      2.7777777777777777,
      0.8992742185082018,
      0.1371018886566162,
      1,
      1677764141.9330354,
      1677764142.0718744,
      {}
    ],
    [
      151,
      null,
      209652396,
      2.7777777777777777,
      0.8631306097183534,
      0.33486366271972656,
      1,
      1677764142.064659,
      1677764142.4014556,
      {}
    ],
    [
      152,
      null,
      209652396,
      2.7777777777777777,
      0.9015026307644692,
      0.18897414207458496,
      1,
      1677764142.1368463,
      1677764142.3281393,
      {}
    ],
    [
      141,
      null,
      209652396,
      8.333333333333332,
      0.020595790776849254,
      0.9774410724639893,
      1,
      1677764142.2383492,
      1677764143.2175224,
      {}
    ],
    [
      139,
      null,
      209652396,
      8.333333333333332,
      0.024484679665738085,
      0.898087739944458,
      1,
      1677764142.397808,
      1677764143.2976806,
      {}
    ],
    [
      142,
      null,
      209652396,
      8.333333333333332,
      0.0328334880841844,
      0.8746047019958496,
      1,
      1677764142.4839623,
      1677764143.359751,
      {}
    ],
    [
      151,
      null,
      209652396,
      8.333333333333332,
      0.7891256576911173,
      0.6567928791046143,
      1,
      1677764143.2955432,
      1677764143.9540286,
      {}
    ],
    [
      148,
      null,
      209652396,
      8.333333333333332,
      0.8831213246672857,
      0.4997870922088623,
      1,
      1677764143.3681836,
      1677764143.8695385,
      {}
    ],
    [
      144,
      null,
      209652396,
      8.333333333333332,
      0.9003899721448468,
      0.6879887580871582,
      1,
      1677764143.4428267,
      1677764144.1323378,
      {}
    ],
    [
      141,
      null,
      209652396,
      25.0,
      0.0200386877127825,
      1.7799022197723389,
      1,
      1677764143.9408453,
      1677764145.7223778,
      {}
    ],
    [
      153,
      null,
      209652396,
      2.7777777777777777,
      0.8987202104611576,
      0.42542147636413574,
      1,
      1677764144.965469,
      1677764145.3924522,
      {}
    ],
    [
      154,
      null,
      209652396,
      2.7777777777777777,
      0.6778040854224698,
      1.078613042831421,
      1,
      1677764145.0452292,
      1677764146.12547,
      {}
    ],
    [
      155,
      null,
      209652396,
      2.7777777777777777,
      0.8992757660167131,
      0.19955921173095703,
      1,
      1677764145.1001723,
      1677764145.3007069,
      {}
    ],
    [
      156,
      null,
      209652396,
      2.7777777777777777,
      0.9009455277004024,
      0.12944507598876953,
      1,
      1677764145.3716676,
      1677764145.5020692,
      {}
    ],
    [
      157,
      null,
      209652396,
      2.7777777777777777,
      0.8135406994738471,
      0.2270059585571289,
      1,
      1677764145.4726617,
      1677764145.7006798,
      {}
    ],
    [
      158,
      null,
      209652396,
      2.7777777777777777,
      0.9015026307644692,
      5.256795883178711,
      1,
      1677764145.5781972,
      1677764150.8359764,
      {}
    ],
    [
      159,
      null,
      209652396,
      2.7777777777777777,
      0.8998313215722686,
      0.2753119468688965,
      1,
      1677764145.776202,
      1677764146.0541275,
      {}
    ],
    [
      160,
      null,
      209652396,
      2.7777777777777777,
      0.9015041782729805,
      1.9329357147216797,
      1,
      1677764145.869333,
      1677764147.8032255,
      {}
    ],
    [
      161,
      null,
      209652396,
      2.7777777777777777,
      0.9015041782729805,
      0.1409626007080078,
      1,
      1677764146.1424844,
      1677764146.2854125,
      {}
    ],
    [
      131,
      null,
      209652396,
      25.0,
      0.026163726400495135,
      1.1996634006500244,
      1,
      1677764146.2626286,
      1677764147.4640827,
      {}
    ],
    [
      151,
      null,
      209652396,
      25.0,
      0.7156654286598576,
      1.0576560497283936,
      1,
      1677764146.3596885,
      1677764147.419056,
      {}
    ],
    [
      162,
      null,
      209652396,
      2.7777777777777777,
      0.8691937480656143,
      0.4770941734313965,
      1,
      1677764147.491907,
      1677764147.9699848,
      {}
    ],
    [
      163,
      null,
      209652396,
      2.7777777777777777,
      0.8992742185082018,
      0.11848139762878418,
      1,
      1677764147.5983992,
      1677764147.7178814,
      {}
    ],
    [
      164,
      null,
      209652396,
      2.7777777777777777,
      0.8875781491798205,
      0.273571252822876,
      1,
      1677764147.7802155,
      1677764148.0553613,
      {}
    ],
    [
      165,
      null,
      209652396,
      2.7777777777777777,
      0.8987186629526462,
      0.27424049377441406,
      1,
      1677764147.8757927,
      1677764148.1517098,
      {}
    ],
    [
      166,
      null,
      209652396,
      2.7777777777777777,
      0.9009455277004024,
      0.23970532417297363,
      1,
      1677764147.9770324,
      1677764148.2177327,
      {}
    ],
    [
      167,
      null,
      209652396,
      2.7777777777777777,
      0.8992773135252244,
      0.07538270950317383,
      1,
      1677764148.0680258,
      1677764148.1445096,
      {}
    ],
    [
      168,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.1533966064453125,
      1,
      1677764148.1508515,
      1677764148.3057597,
      {}
    ],
    [
      169,
      null,
      209652396,
      2.7777777777777777,
      0.8180532342927886,
      0.2935338020324707,
      1,
      1677764148.219454,
      1677764148.514688,
      {}
    ],
    [
      170,
      null,
      209652396,
      2.7777777777777777,
      0.8569885484370163,
      0.37688112258911133,
      1,
      1677764148.3007402,
      1677764148.6791224,
      {}
    ],
    [
      171,
      null,
      209652396,
      2.7777777777777777,
      0.8045697926338595,
      0.4362027645111084,
      1,
      1677764148.9248397,
      1677764149.3621247,
      {}
    ],
    [
      172,
      null,
      209652396,
      2.7777777777777777,
      0.8987186629526462,
      0.24666810035705566,
      1,
      1677764149.0140815,
      1677764149.2617662,
      {}
    ],
    [
      173,
      null,
      209652396,
      2.7777777777777777,
      0.8998344165892912,
      0.40991711616516113,
      1,
      1677764149.0619442,
      1677764149.4732957,
      {}
    ],
    [
      174,
      null,
      209652396,
      2.7777777777777777,
      0.7762952646239554,
      0.8810906410217285,
      1,
      1677764149.1104064,
      1677764149.993005,
      {}
    ],
    [
      175,
      null,
      209652396,
      2.7777777777777777,
      0.9003899721448468,
      0.3548247814178467,
      1,
      1677764149.3272092,
      1677764149.6835604,
      {}
    ],
    [
      176,
      null,
      209652396,
      2.7777777777777777,
      0.9003899721448468,
      0.6085314750671387,
      1,
      1677764149.4298837,
      1677764150.0399122,
      {}
    ],
    [
      177,
      null,
      209652396,
      2.7777777777777777,
      0.5814871556793563,
      0.2550163269042969,
      1,
      1677764149.5493925,
      1677764149.8059285,
      {}
    ],
    [
      178,
      null,
      209652396,
      2.7777777777777777,
      0.6110337356855463,
      0.25336265563964844,
      1,
      1677764149.7584279,
      1677764150.013307,
      {}
    ],
    [
      179,
      null,
      209652396,
      2.7777777777777777,
      0.6910213556174559,
      0.4878692626953125,
      1,
      1677764149.8734295,
      1677764150.363091,
      {}
    ],
    [
      169,
      null,
      209652396,
      8.333333333333332,
      0.526454658000619,
      1.6175730228424072,
      1,
      1677764150.0618517,
      1677764151.6810067,
      {}
    ],
    [
      170,
      null,
      209652396,
      8.333333333333332,
      0.7349350046425256,
      1.2120282649993896,
      1,
      1677764150.167279,
      1677764151.3808289,
      {}
    ],
    [
      162,
      null,
      209652396,
      8.333333333333332,
      0.8998344165892912,
      1.1103956699371338,
      1,
      1677764150.2177868,
      1677764151.3300824,
      {}
    ],
    [
      180,
      null,
      209652396,
      2.7777777777777777,
      0.6955973382853606,
      0.11772537231445312,
      1,
      1677764150.7843115,
      1677764150.903028,
      {}
    ],
    [
      181,
      null,
      209652396,
      2.7777777777777777,
      0.05787372330547813,
      1.029728651046753,
      1,
      1677764150.8784063,
      1677764151.9092877,
      {}
    ],
    [
      182,
      null,
      209652396,
      2.7777777777777777,
      0.8992742185082018,
      1.0290868282318115,
      1,
      1677764150.9576082,
      1677764151.9881017,
      {}
    ],
    [
      183,
      null,
      209652396,
      2.7777777777777777,
      0.8998313215722686,
      1.559328556060791,
      1,
      1677764151.037063,
      1677764152.5979784,
      {}
    ],
    [
      184,
      null,
      209652396,
      2.7777777777777777,
      0.9003884246363355,
      0.6858692169189453,
      1,
      1677764151.4034069,
      1677764152.090969,
      {}
    ],
    [
      185,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.686286211013794,
      1,
      1677764151.4998631,
      1677764152.1878328,
      {}
    ],
    [
      186,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.7000737190246582,
      1,
      1677764151.7428875,
      1677764152.444799,
      {}
    ],
    [
      187,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.15998125076293945,
      1,
      1677764151.8688889,
      1677764152.0298195,
      {}
    ],
    [
      188,
      null,
      209652396,
      2.7777777777777777,
      0.7552011761064685,
      0.06190204620361328,
      1,
      1677764151.9796083,
      1677764152.0424962,
      {}
    ],
    [
      169,
      null,
      209652396,
      25.0,
      0.44081863200247606,
      2.021785259246826,
      1,
      1677764152.070436,
      1677764154.093141,
      {}
    ],
    [
      154,
      null,
      209652396,
      8.333333333333332,
      0.22316001238006822,
      2.3752944469451904,
      1,
      1677764152.1682189,
      1677764154.5445065,
      {}
    ],
    [
      157,
      null,
      209652396,
      8.333333333333332,
      0.6888146084803466,
      0.5347671508789062,
      1,
      1677764152.2414367,
      1677764152.7776732,
      {}
    ],
    [
      153,
      null,
      209652396,
      8.333333333333332,
      0.89983286908078,
      0.8815195560455322,
      1,
      1677764152.312161,
      1677764153.19481,
      {}
    ],
    [
      177,
      null,
      209652396,
      8.333333333333332,
      0.15639275766016714,
      0.8015556335449219,
      1,
      1677764152.3740876,
      1677764153.1766732,
      {}
    ],
    [
      178,
      null,
      209652396,
      8.333333333333332,
      0.4445620550913031,
      0.685305118560791,
      1,
      1677764152.5222082,
      1677764153.208533,
      {}
    ],
    [
      179,
      null,
      209652396,
      8.333333333333332,
      0.329436706901888,
      1.2827885150909424,
      1,
      1677764152.6620722,
      1677764153.9465344,
      {}
    ],
    [
      181,
      null,
      209652396,
      8.333333333333332,
      0.023375116063138357,
      1.7435939311981201,
      1,
      1677764152.852198,
      1677764154.596822,
      {}
    ],
    [
      180,
      null,
      209652396,
      8.333333333333332,
      0.5520473537604457,
      0.33228635787963867,
      1,
      1677764153.1676598,
      1677764153.5009587,
      {}
    ],
    [
      188,
      null,
      209652396,
      8.333333333333332,
      0.43016094088517487,
      0.11665558815002441,
      1,
      1677764153.2557027,
      1677764153.3740294,
      {}
    ],
    [
      189,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      1.2863407135009766,
      1,
      1677764154.046113,
      1677764155.3333263,
      {}
    ],
    [
      190,
      null,
      209652396,
      2.7777777777777777,
      0.8987186629526462,
      0.1694183349609375,
      1,
      1677764154.1410837,
      1677764154.3117929,
      {}
    ],
    [
      191,
      null,
      209652396,
      2.7777777777777777,
      0.14300990405447234,
      0.5360672473907471,
      1,
      1677764154.1968045,
      1677764154.734102,
      {}
    ],
    [
      192,
      null,
      209652396,
      2.7777777777777777,
      0.9003884246363355,
      1.4551525115966797,
      1,
      1677764154.2442656,
      1677764155.700712,
      {}
    ],
    [
      193,
      null,
      209652396,
      2.7777777777777777,
      0.10849891674404222,
      0.9512479305267334,
      1,
      1677764154.2898998,
      1677764155.2426057,
      {}
    ],
    [
      194,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      1.4504711627960205,
      1,
      1677764154.3434608,
      1677764155.7961965,
      {}
    ],
    [
      195,
      null,
      209652396,
      2.7777777777777777,
      0.1341008975549366,
      0.8041775226593018,
      1,
      1677764154.4297562,
      1677764155.2349374,
      {}
    ],
    [
      196,
      null,
      209652396,
      2.7777777777777777,
      0.8792664809656453,
      0.2764699459075928,
      1,
      1677764154.627234,
      1677764154.9046738,
      {}
    ],
    [
      197,
      null,
      209652396,
      2.7777777777777777,
      0.8953760445682452,
      0.27223634719848633,
      1,
      1677764154.7115898,
      1677764154.9854133,
      {}
    ],
    [
      154,
      null,
      209652396,
      25.0,
      0.06010058805323426,
      7.032940149307251,
      1,
      1677764154.8045316,
      1677764161.8384168,
      {}
    ],
    [
      177,
      null,
      209652396,
      25.0,
      0.06399257195914587,
      1.8051912784576416,
      1,
      1677764154.9756095,
      1677764156.7824228,
      {}
    ],
    [
      181,
      null,
      209652396,
      25.0,
      0.020592695759826696,
      5.351042747497559,
      1,
      1677764155.053511,
      1677764160.4062977,
      {}
    ],
    [
      198,
      null,
      209652396,
      2.7777777777777777,
      0.8987186629526462,
      1.1730222702026367,
      1,
      1677764155.8947787,
      1677764157.0691621,
      {}
    ],
    [
      199,
      null,
      209652396,
      2.7777777777777777,
      0.8514020427112349,
      1.9063255786895752,
      1,
      1677764155.983091,
      1677764157.890334,
      {}
    ],
    [
      200,
      null,
      209652396,
      2.7777777777777777,
      0.5442169606932838,
      2.7138161659240723,
      1,
      1677764156.0451136,
      1677764158.7602067,
      {}
    ],
    [
      201,
      null,
      209652396,
      2.7777777777777777,
      0.05175023212627683,
      0.26784658432006836,
      1,
      1677764156.091485,
      1677764156.360223,
      {}
    ],
    [
      202,
      null,
      209652396,
      2.7777777777777777,
      0.05397864438254418,
      0.2192096710205078,
      1,
      1677764156.156857,
      1677764156.3776338,
      {}
    ],
    [
      203,
      null,
      209652396,
      2.7777777777777777,
      0.0539848344165893,
      0.24820828437805176,
      1,
      1677764156.4308972,
      1677764156.6808243,
      {}
    ],
    [
      204,
      null,
      209652396,
      2.7777777777777777,
      0.04730424017332102,
      0.35477733612060547,
      1,
      1677764156.5147579,
      1677764156.8711896,
      {}
    ],
    [
      205,
      null,
      209652396,
      2.7777777777777777,
      0.04953110492107693,
      0.2939436435699463,
      1,
      1677764156.743552,
      1677764157.0384684,
      {}
    ],
    [
      206,
      null,
      209652396,
      2.7777777777777777,
      0.7674001857010213,
      2.0036258697509766,
      1,
      1677764156.8484733,
      1677764158.8537316,
      {}
    ],
    [
      193,
      null,
      209652396,
      8.333333333333332,
      0.02893995666976168,
      2.530489921569824,
      1,
      1677764156.9376652,
      1677764159.4696667,
      {}
    ],
    [
      195,
      null,
      209652396,
      8.333333333333332,
      0.03005725781491786,
      2.626314401626587,
      1,
      1677764157.1022086,
      1677764159.7303016,
      {}
    ],
    [
      191,
      null,
      209652396,
      8.333333333333332,
      0.02504487774682751,
      2.2608425617218018,
      1,
      1677764157.1898315,
      1677764159.4516587,
      {}
    ],
    [
      207,
      null,
      209652396,
      2.7777777777777777,
      0.6688780563293097,
      0.20542240142822266,
      1,
      1677764158.1698747,
      1677764158.377089,
      {}
    ],
    [
      208,
      null,
      209652396,
      2.7777777777777777,
      0.04729959764778724,
      0.35138416290283203,
      1,
      1677764158.4441626,
      1677764158.7965767,
      {}
    ],
    [
      209,
      null,
      209652396,
      2.7777777777777777,
      0.895933147632312,
      0.3852529525756836,
      1,
      1677764158.8266547,
      1677764159.2129002,
      {}
    ],
    [
      210,
      null,
      209652396,
      2.7777777777777777,
      0.9003884246363355,
      0.6135091781616211,
      1,
      1677764158.9251947,
      1677764159.5405235,
      {}
    ],
    [
      211,
      null,
      209652396,
      2.7777777777777777,
      0.8776183844011142,
      0.11667156219482422,
      1,
      1677764159.0284889,
      1677764159.1471708,
      {}
    ],
    [
      212,
      null,
      209652396,
      2.7777777777777777,
      Infinity,
      0.0,
      2,
      1677764159.215053,
      1677764159.3516092,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 158, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/smac/runner/target_function_runner.py\", line 231, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/home/skrebs/Projects/AutoML/SMAC3/examples/2_multi_fidelity/1_mlp_epochs.py\", line 107, in train\n    score = cross_val_score(classifier, dataset.data, dataset.target, cv=cv, error_score=\"raise\")\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 1085, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 901, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 819, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/_parallel_backends.py\", line 597, in __init__\n    self.results = batch()\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in __call__\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/joblib/parallel.py\", line 288, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 747, in fit\n    return self._fit(X, y, incremental=False)\n  File \"/home/skrebs/miniconda3/envs/test_smac/lib/python3.9/site-packages/sklearn/neural_network/_multilayer_perceptron.py\", line 491, in _fit\n    raise ValueError(\nValueError: Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.\n",
        "error": "ValueError('Solver produced non-finite parameter weights. The input data may contain large values and need to be preprocessed.')"
      }
    ],
    [
      213,
      null,
      209652396,
      2.7777777777777777,
      0.9003915196533581,
      0.08005523681640625,
      1,
      1677764159.2863796,
      1677764159.3674417,
      {}
    ],
    [
      214,
      null,
      209652396,
      2.7777777777777777,
      0.8814825131538223,
      0.17781972885131836,
      1,
      1677764159.4224887,
      1677764159.6012597,
      {}
    ],
    [
      215,
      null,
      209652396,
      2.7777777777777777,
      0.04284432064376342,
      0.20652532577514648,
      1,
      1677764159.5147805,
      1677764159.7222297,
      {}
    ],
    [
      204,
      null,
      209652396,
      8.333333333333332,
      0.027276385020117644,
      1.133220911026001,
      1,
      1677764159.6123545,
      1677764160.7464676,
      {}
    ],
    [
      205,
      null,
      209652396,
      8.333333333333332,
      0.028944599195295573,
      0.7772011756896973,
      1,
      1677764159.6953933,
      1677764160.4739964,
      {}
    ],
    [
      201,
      null,
      209652396,
      8.333333333333332,
      0.02448932219127209,
      0.7697703838348389,
      1,
      1677764159.7800193,
      1677764160.5512993,
      {}
    ],
    [
      215,
      null,
      209652396,
      8.333333333333332,
      0.023936861652739116,
      0.6595172882080078,
      1,
      1677764159.878179,
      1677764160.5386386,
      {}
    ],
    [
      208,
      null,
      209652396,
      8.333333333333332,
      0.025049520272361514,
      0.7229220867156982,
      1,
      1677764159.9403815,
      1677764160.6650572,
      {}
    ],
    [
      207,
      null,
      209652396,
      8.333333333333332,
      0.6388053234292789,
      0.46515989303588867,
      1,
      1677764159.9907553,
      1677764160.4576466,
      {}
    ],
    [
      191,
      null,
      209652396,
      25.0,
      0.022822655524605273,
      3.9904990196228027,
      1,
      1677764160.4823878,
      1677764164.4738204,
      {}
    ],
    [
      216,
      null,
      209652396,
      2.7777777777777777,
      0.03895697926338593,
      0.19351458549499512,
      1,
      1677764161.113628,
      1677764161.3078542,
      {}
    ],
    [
      217,
      null,
      209652396,
      2.7777777777777777,
      0.041179201485608274,
      0.15688276290893555,
      1,
      1677764161.2121797,
      1677764161.3698068,
      {}
    ],
    [
      218,
      null,
      209652396,
      2.7777777777777777,
      0.05064995357474478,
      0.1958482265472412,
      1,
      1677764161.2545023,
      1677764161.4511297,
      {}
    ],
    [
      219,
      null,
      209652396,
      2.7777777777777777,
      0.03950634478489623,
      0.29340052604675293,
      1,
      1677764161.3050706,
      1677764161.599771,
      {}
    ],
    [
      220,
      null,
      209652396,
      2.7777777777777777,
      0.043402971216341735,
      0.296414852142334,
      1,
      1677764161.3475232,
      1677764161.6448026,
      {}
    ],
    [
      221,
      null,
      209652396,
      2.7777777777777777,
      0.046185391519653285,
      0.2377183437347412,
      1,
      1677764161.4159756,
      1677764161.6552315,
      {}
    ],
    [
      222,
      null,
      209652396,
      2.7777777777777777,
      0.27805632930981117,
      0.21477007865905762,
      1,
      1677764161.4854696,
      1677764161.7011287,
      {}
    ],
    [
      223,
      null,
      209652396,
      2.7777777777777777,
      0.041734757041163695,
      0.20228028297424316,
      1,
      1677764161.5538728,
      1677764161.757094,
      {}
    ],
    [
      224,
      null,
      209652396,
      2.7777777777777777,
      0.048412256267409526,
      0.21712040901184082,
      1,
      1677764161.6097271,
      1677764161.8283606,
      {}
    ],
    [
      201,
      null,
      209652396,
      25.0,
      0.02059424326833792,
      1.549539566040039,
      1,
      1677764161.6663876,
      1677764163.217489,
      {}
    ],
    [
      215,
      null,
      209652396,
      25.0,
      0.0200386877127825,
      1.4803757667541504,
      1,
      1677764161.777333,
      1677764163.2592294,
      {}
    ],
    [
      225,
      null,
      209652396,
      2.7777777777777777,
      0.03895078922934092,
      0.23087000846862793,
      1,
      1677764162.8119876,
      1677764163.043676,
      {}
    ],
    [
      226,
      null,
      209652396,
      2.7777777777777777,
      0.05118848653667596,
      0.26145029067993164,
      1,
      1677764162.8925183,
      1677764163.155444,
      {}
    ],
    [
      227,
      null,
      209652396,
      2.7777777777777777,
      0.06065150108325601,
      0.20571589469909668,
      1,
      1677764162.9453907,
      1677764163.1524777,
      {}
    ],
    [
      228,
      null,
      209652396,
      2.7777777777777777,
      0.05230269266480969,
      0.2148146629333496,
      1,
      1677764163.0061045,
      1677764163.2219715,
      {}
    ],
    [
      229,
      null,
      209652396,
      2.7777777777777777,
      0.04395852677189738,
      0.30765676498413086,
      1,
      1677764163.0748117,
      1677764163.3833919,
      {}
    ],
    [
      230,
      null,
      209652396,
      2.7777777777777777,
      0.04339832869080795,
      0.22253727912902832,
      1,
      1677764163.1743631,
      1677764163.398336,
      {}
    ],
    [
      231,
      null,
      209652396,
      2.7777777777777777,
      0.09794645620550924,
      0.10020136833190918,
      1,
      1677764163.2700994,
      1677764163.3712845,
      {}
    ],
    [
      232,
      null,
      209652396,
      2.7777777777777777,
      0.07234602290312586,
      0.17875218391418457,
      1,
      1677764163.3603694,
      1677764163.5400317,
      {}
    ],
    [
      233,
      null,
      209652396,
      2.7777777777777777,
      0.04284896316929743,
      0.19400739669799805,
      1,
      1677764163.4321268,
      1677764163.6269479,
      {}
    ],
    [
      216,
      null,
      209652396,
      8.333333333333332,
      0.021705354379449204,
      0.610851526260376,
      1,
      1677764163.517449,
      1677764164.1295092,
      {}
    ],
    [
      219,
      null,
      209652396,
      8.333333333333332,
      0.023378211080160916,
      0.46740031242370605,
      1,
      1677764163.5582397,
      1677764164.0270936,
      {}
    ],
    [
      217,
      null,
      209652396,
      8.333333333333332,
      0.02559888579387193,
      0.425473690032959,
      1,
      1677764163.6308239,
      1677764164.0571702,
      {}
    ],
    [
      234,
      null,
      209652396,
      2.7777777777777777,
      0.07178737233054788,
      0.15244770050048828,
      1,
      1677764164.3008862,
      1677764164.4539998,
      {}
    ],
    [
      235,
      null,
      209652396,
      2.7777777777777777,
      0.07346332404828215,
      0.15741372108459473,
      1,
      1677764164.385775,
      1677764164.5438557,
      {}
    ],
    [
      236,
      null,
      209652396,
      2.7777777777777777,
      0.041179201485608274,
      0.1732792854309082,
      1,
      1677764164.423629,
      1677764164.5980206,
      {}
    ],
    [
      237,
      null,
      209652396,
      2.7777777777777777,
      0.040066542865985766,
      0.13768815994262695,
      1,
      1677764164.4627619,
      1677764164.601167,
      {}
    ],
    [
      238,
      null,
      209652396,
      2.7777777777777777,
      0.05564685855772211,
      0.16767263412475586,
      1,
      1677764164.5159495,
      1677764164.6846619,
      {}
    ],
    [
      239,
      null,
      209652396,
      2.7777777777777777,
      0.03673011451562991,
      0.15059828758239746,
      1,
      1677764164.5695121,
      1677764164.7212646,
      {}
    ],
    [
      240,
      null,
      209652396,
      2.7777777777777777,
      0.500834107087589,
      0.09257149696350098,
      1,
      1677764164.6261408,
      1677764164.719447,
      {}
    ],
    [
      241,
      null,
      209652396,
      2.7777777777777777,
      0.8614453729495513,
      0.11156558990478516,
      1,
      1677764164.6939113,
      1677764164.8062284,
      {}
    ],
    [
      242,
      null,
      209652396,
      2.7777777777777777,
      0.04451253481894146,
      0.15892338752746582,
      1,
      1677764164.7500641,
      1677764164.909705,
      {}
    ],
    [
      216,
      null,
      209652396,
      25.0,
      0.02059424326833792,
      1.5470714569091797,
      1,
      1677764164.8133593,
      1677764166.3611012,
      {}
    ],
    [
      225,
      null,
      209652396,
      8.333333333333332,
      0.02170380687093787,
      0.5686407089233398,
      1,
      1677764164.865456,
      1677764165.4351501,
      {}
    ],
    [
      233,
      null,
      209652396,
      8.333333333333332,
      0.021709996904982987,
      0.40514421463012695,
      1,
      1677764164.901603,
      1677764165.3074658,
      {}
    ],
    [
      230,
      null,
      209652396,
      8.333333333333332,
      0.02226555246053863,
      0.6672887802124023,
      1,
      1677764164.9370046,
      1677764165.6050267,
      {}
    ],
    [
      239,
      null,
      209652396,
      8.333333333333332,
      0.025601980810894487,
      0.5104749202728271,
      1,
      1677764164.993113,
      1677764165.5048022,
      {}
    ],
    [
      237,
      null,
      209652396,
      8.333333333333332,
      0.02226245744351585,
      0.6380431652069092,
      1,
      1677764165.038199,
      1677764165.677395,
      {}
    ],
    [
      236,
      null,
      209652396,
      8.333333333333332,
      0.021709996904982987,
      0.5436501502990723,
      1,
      1677764165.0754855,
      1677764165.6204398,
      {}
    ],
    [
      243,
      null,
      209652396,
      2.7777777777777777,
      0.3850154750851129,
      0.17546892166137695,
      1,
      1677764165.8176312,
      1677764165.993789,
      {}
    ],
    [
      244,
      null,
      209652396,
      2.7777777777777777,
      0.6044181367997523,
      0.19161748886108398,
      1,
      1677764165.9185574,
      1677764166.111264,
      {}
    ],
    [
      245,
      null,
      209652396,
      2.7777777777777777,
      0.4413107397090684,
      0.14992833137512207,
      1,
      1677764165.9544845,
      1677764166.105169,
      {}
    ],
    [
      246,
      null,
      209652396,
      2.7777777777777777,
      0.5275735066542866,
      0.16992783546447754,
      1,
      1677764165.9917212,
      1677764166.1623886,
      {}
    ],
    [
      247,
      null,
      209652396,
      2.7777777777777777,
      0.8736490250696378,
      0.1894819736480713,
      1,
      1677764166.0293534,
      1677764166.219912,
      {}
    ],
    [
      248,
      null,
      209652396,
      2.7777777777777777,
      0.7890962550294026,
      0.05162334442138672,
      1,
      1677764166.0931158,
      1677764166.1459827,
      {}
    ],
    [
      249,
      null,
      209652396,
      2.7777777777777777,
      0.04174094707520892,
      0.19551944732666016,
      1,
      1677764166.1371367,
      1677764166.3334482,
      {}
    ],
    [
      250,
      null,
      209652396,
      2.7777777777777777,
      0.8987186629526462,
      0.08623456954956055,
      1,
      1677764166.2212806,
      1677764166.3087301,
      {}
    ],
    [
      251,
      null,
      209652396,
      2.7777777777777777,
      0.887017951098731,
      0.22229218482971191,
      1,
      1677764166.3026397,
      1677764166.5257215,
      {}
    ],
    [
      225,
      null,
      209652396,
      25.0,
      0.01669916434540375,
      1.3958735466003418,
      1,
      1677764166.369329,
      1677764167.7659872,
      {}
    ],
    [
      236,
      null,
      209652396,
      25.0,
      0.022267099969049853,
      1.1979000568389893,
      1,
      1677764166.4529824,
      1677764167.6516058,
      {}
    ],
    [
      252,
      null,
      209652396,
      2.7777777777777777,
      0.8948189415041783,
      0.13735103607177734,
      1,
      1677764166.963925,
      1677764167.1023214,
      {}
    ],
    [
      253,
      null,
      209652396,
      2.7777777777777777,
      0.04339832869080773,
      0.21960997581481934,
      1,
      1677764167.0216475,
      1677764167.2419353,
      {}
    ],
    [
      254,
      null,
      209652396,
      2.7777777777777777,
      0.8948344165892912,
      0.3180077075958252,
      1,
      1677764167.0654516,
      1677764167.3842278,
      {}
    ],
    [
      255,
      null,
      209652396,
      2.7777777777777777,
      0.8875858867223769,
      1.9747869968414307,
      1,
      1677764167.1035435,
      1677764169.0790913,
      {}
    ],
    [
      256,
      null,
      209652396,
      2.7777777777777777,
      0.8792200557103064,
      0.17138147354125977,
      1,
      1677764167.1569417,
      1677764167.3295515,
      {}
    ],
    [
      257,
      null,
      209652396,
      2.7777777777777777,
      0.045626740947075306,
      0.2547445297241211,
      1,
      1677764167.225941,
      1677764167.4818845,
      {}
    ],
    [
      258,
      null,
      209652396,
      2.7777777777777777,
      0.8525301764159703,
      0.21639323234558105,
      1,
      1677764167.2756937,
      1677764167.4945085,
      {}
    ],
    [
      259,
      null,
      209652396,
      2.7777777777777777,
      0.0428474156607862,
      0.27950096130371094,
      1,
      1677764167.3498578,
      1677764167.6302965,
      {}
    ],
    [
      260,
      null,
      209652396,
      2.7777777777777777,
      0.895943980191891,
      0.21339201927185059,
      1,
      1677764167.4360008,
      1677764167.6508179,
      {}
    ],
    [
      249,
      null,
      209652396,
      8.333333333333332,
      0.022822655524605273,
      0.504335880279541,
      1,
      1677764167.5371675,
      1677764168.0424917,
      {}
    ],
    [
      243,
      null,
      209652396,
      8.333333333333332,
      0.1035128443206439,
      0.5676827430725098,
      1,
      1677764167.6337748,
      1677764168.2024288,
      {}
    ],
    [
      245,
      null,
      209652396,
      8.333333333333332,
      0.21702568864128757,
      0.6494171619415283,
      1,
      1677764167.6894143,
      1677764168.3397343,
      {}
    ],
    [
      261,
      null,
      209652396,
      2.7777777777777777,
      0.8914995357474466,
      0.13340353965759277,
      1,
      1677764168.412558,
      1677764168.5467012,
      {}
    ],
    [
      262,
      null,
      209652396,
      2.7777777777777777,
      0.7406963788300835,
      0.898587703704834,
      1,
      1677764168.4997337,
      1677764169.399012,
      {}
    ],
    [
      263,
      null,
      209652396,
      2.7777777777777777,
      0.0712441968430827,
      0.1737809181213379,
      1,
      1677764168.5352569,
      1677764168.7097287,
      {}
    ],
    [
      264,
      null,
      209652396,
      2.7777777777777777,
      0.05175487465181061,
      0.22603058815002441,
      1,
      1677764168.5701637,
      1677764168.7969074,
      {}
    ],
    [
      265,
      null,
      209652396,
      2.7777777777777777,
      0.8603311668214175,
      0.2232511043548584,
      1,
      1677764168.6276417,
      1677764168.852075,
      {}
    ],
    [
      266,
      null,
      209652396,
      2.7777777777777777,
      0.04620396162178897,
      0.18236756324768066,
      1,
      1677764168.6721303,
      1677764168.8553126,
      {}
    ],
    [
      267,
      null,
      209652396,
      2.7777777777777777,
      0.06175023212627673,
      0.28707289695739746,
      1,
      1677764168.71531,
      1677764169.0037286,
      {}
    ],
    [
      268,
      null,
      209652396,
      2.7777777777777777,
      0.32165583410708753,
      0.15569639205932617,
      1,
      1677764168.778424,
      1677764168.9351516,
      {}
    ],
    [
      269,
      null,
      209652396,
      2.7777777777777777,
      0.9132033426183844,
      0.1439361572265625,
      1,
      1677764168.8354,
      1677764168.9802678,
      {}
    ],
    [
      249,
      null,
      209652396,
      25.0,
      0.020040235221293612,
      1.1468207836151123,
      1,
      1677764168.9248872,
      1677764170.0731037,
      {}
    ],
    [
      270,
      null,
      209652396,
      2.7777777777777777,
      0.89983286908078,
      0.1318519115447998,
      1,
      1677764169.582097,
      1677764169.7147317,
      {}
    ],
    [
      271,
      null,
      209652396,
      2.7777777777777777,
      0.04897245434849895,
      0.1587357521057129,
      1,
      1677764169.6806002,
      1677764169.8404562,
      {}
    ],
    [
      272,
      null,
      209652396,
      2.7777777777777777,
      0.8597771587743732,
      0.1420907974243164,
      1,
      1677764169.7172372,
      1677764169.8600414,
      {}
    ],
    [
      273,
      null,
      209652396,
      2.7777777777777777,
      0.8836784277313525,
      0.2064516544342041,
      1,
      1677764169.7542863,
      1677764169.9614353,
      {}
    ],
    [
      274,
      null,
      209652396,
      2.7777777777777777,
      0.9020597338285361,
      0.14542460441589355,
      1,
      1677764169.8116825,
      1677764169.9579017,
      {}
    ],
    [
      275,
      null,
      209652396,
      2.7777777777777777,
      0.14359486227174245,
      0.15196681022644043,
      1,
      1677764169.8674424,
      1677764170.020184,
      {}
    ],
    [
      276,
      null,
      209652396,
      2.7777777777777777,
      0.05509130300216647,
      0.1811809539794922,
      1,
      1677764169.930315,
      1677764170.1122985,
      {}
    ],
    [
      277,
      null,
      209652396,
      2.7777777777777777,
      0.8808898173939956,
      0.17611312866210938,
      1,
      1677764170.001022,
      1677764170.1779277,
      {}
    ]
  ],
  "configs": {
    "1": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 123,
      "solver": "lbfgs"
    },
    "2": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 49,
      "solver": "lbfgs"
    },
    "3": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 155,
      "learning_rate_init": 0.006677306766018313
    },
    "4": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 197,
      "solver": "adam",
      "batch_size": 241,
      "learning_rate_init": 0.018781738757161916
    },
    "5": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 10,
      "solver": "adam",
      "batch_size": 62,
      "learning_rate_init": 0.00011889379831773019
    },
    "6": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 66,
      "solver": "adam",
      "batch_size": 214,
      "learning_rate_init": 0.005599223654063347
    },
    "7": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 79,
      "solver": "adam",
      "batch_size": 87,
      "learning_rate_init": 0.0018268942281532308
    },
    "8": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 35,
      "solver": "adam",
      "batch_size": 57,
      "learning_rate_init": 0.00044181257379025503
    },
    "9": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 39,
      "solver": "lbfgs"
    },
    "10": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 48,
      "solver": "lbfgs"
    },
    "11": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 55,
      "solver": "lbfgs"
    },
    "12": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 38,
      "solver": "lbfgs"
    },
    "13": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 51,
      "solver": "lbfgs"
    },
    "14": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 36,
      "solver": "lbfgs"
    },
    "15": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 43,
      "solver": "lbfgs"
    },
    "16": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 89,
      "solver": "lbfgs"
    },
    "17": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 75,
      "solver": "lbfgs"
    },
    "18": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 35,
      "solver": "lbfgs"
    },
    "19": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 49,
      "solver": "lbfgs"
    },
    "20": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 135,
      "solver": "lbfgs"
    },
    "21": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 45,
      "solver": "lbfgs"
    },
    "22": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 41,
      "solver": "lbfgs"
    },
    "23": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 199,
      "solver": "adam",
      "batch_size": 38,
      "learning_rate_init": 0.030613543792987537
    },
    "24": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 203,
      "solver": "sgd",
      "batch_size": 175,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.08326991437231361
    },
    "25": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 16,
      "solver": "lbfgs"
    },
    "26": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 59,
      "solver": "sgd",
      "batch_size": 154,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.0273329242479713
    },
    "27": {
      "activation": "logistic",
      "n_layer": 5,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 159,
      "learning_rate": "constant",
      "learning_rate_init": 0.00609800175542105
    },
    "28": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 163,
      "learning_rate": "constant",
      "learning_rate_init": 0.00799256194062693
    },
    "29": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 59,
      "solver": "sgd",
      "batch_size": 228,
      "learning_rate": "constant",
      "learning_rate_init": 0.00779426588969482
    },
    "30": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 234,
      "learning_rate_init": 0.01005962622457448
    },
    "31": {
      "activation": "logistic",
      "n_layer": 5,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 285,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.09707670885296034
    },
    "32": {
      "activation": "logistic",
      "n_layer": 5,
      "n_neurons": 62,
      "solver": "adam",
      "batch_size": 149,
      "learning_rate_init": 0.001129433047160041
    },
    "33": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 183,
      "solver": "lbfgs"
    },
    "34": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 88,
      "solver": "sgd",
      "batch_size": 147,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.011095885875577926
    },
    "35": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 54,
      "solver": "adam",
      "batch_size": 227,
      "learning_rate_init": 0.0003356844294314465
    },
    "36": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 128,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.015203033215297552
    },
    "37": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 68,
      "solver": "adam",
      "batch_size": 137,
      "learning_rate_init": 0.023321489745692613
    },
    "38": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 70,
      "solver": "sgd",
      "batch_size": 166,
      "learning_rate": "constant",
      "learning_rate_init": 0.233061366490473
    },
    "39": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 68,
      "solver": "adam",
      "batch_size": 133,
      "learning_rate_init": 0.012149848181913846
    },
    "40": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 75,
      "solver": "adam",
      "batch_size": 123,
      "learning_rate_init": 0.010668851415562942
    },
    "41": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 171,
      "learning_rate_init": 0.006861116564344047
    },
    "42": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 189,
      "learning_rate_init": 0.006684661061794954
    },
    "43": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 155,
      "solver": "sgd",
      "batch_size": 287,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.1918971314576899
    },
    "44": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 166,
      "learning_rate_init": 0.006791445073690924
    },
    "45": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 192,
      "learning_rate_init": 0.0068467672058098875
    },
    "46": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 171,
      "learning_rate_init": 0.006784784996705534
    },
    "47": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 188,
      "learning_rate_init": 0.006744914982830161
    },
    "48": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 56,
      "solver": "adam",
      "batch_size": 188,
      "learning_rate_init": 0.006419550405393567
    },
    "49": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 67,
      "solver": "adam",
      "batch_size": 215,
      "learning_rate_init": 0.00346453897969027
    },
    "50": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 157,
      "solver": "sgd",
      "batch_size": 246,
      "learning_rate": "constant",
      "learning_rate_init": 0.000760174757927805
    },
    "51": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 83,
      "solver": "adam",
      "batch_size": 225,
      "learning_rate_init": 0.0015184868097929223
    },
    "52": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 9,
      "solver": "lbfgs"
    },
    "53": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 87,
      "solver": "sgd",
      "batch_size": 222,
      "learning_rate": "constant",
      "learning_rate_init": 0.005157229247636967
    },
    "54": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 96,
      "solver": "sgd",
      "batch_size": 219,
      "learning_rate": "constant",
      "learning_rate_init": 0.005418779028960399
    },
    "55": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 239,
      "solver": "adam",
      "batch_size": 232,
      "learning_rate_init": 0.0008483447866854157
    },
    "56": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 21,
      "solver": "adam",
      "batch_size": 97,
      "learning_rate_init": 0.636517640490697
    },
    "57": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 106,
      "solver": "sgd",
      "batch_size": 190,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.00015658897593256226
    },
    "58": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 161,
      "solver": "lbfgs"
    },
    "59": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 208,
      "solver": "lbfgs"
    },
    "60": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 70,
      "solver": "lbfgs"
    },
    "61": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 209,
      "solver": "sgd",
      "batch_size": 272,
      "learning_rate": "constant",
      "learning_rate_init": 0.10054954083691295
    },
    "62": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 83,
      "solver": "sgd",
      "batch_size": 222,
      "learning_rate": "constant",
      "learning_rate_init": 0.0023269789757723704
    },
    "63": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 229,
      "solver": "sgd",
      "batch_size": 140,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.0060889449922033306
    },
    "64": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 51,
      "solver": "lbfgs"
    },
    "65": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 133,
      "solver": "lbfgs"
    },
    "66": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 88,
      "solver": "adam",
      "batch_size": 295,
      "learning_rate_init": 0.006103481913085134
    },
    "67": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 216,
      "solver": "adam",
      "batch_size": 228,
      "learning_rate_init": 0.010048466695270944
    },
    "68": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 93,
      "solver": "sgd",
      "batch_size": 190,
      "learning_rate": "constant",
      "learning_rate_init": 0.002085131301755811
    },
    "69": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 10,
      "solver": "adam",
      "batch_size": 97,
      "learning_rate_init": 0.0001736909509831432
    },
    "70": {
      "activation": "logistic",
      "n_layer": 5,
      "n_neurons": 102,
      "solver": "adam",
      "batch_size": 212,
      "learning_rate_init": 0.0016511459263159924
    },
    "71": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 103,
      "solver": "lbfgs"
    },
    "72": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 40,
      "solver": "sgd",
      "batch_size": 295,
      "learning_rate": "constant",
      "learning_rate_init": 0.002050935505684722
    },
    "73": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 64,
      "solver": "sgd",
      "batch_size": 106,
      "learning_rate": "constant",
      "learning_rate_init": 0.0114301248242825
    },
    "74": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 156,
      "solver": "sgd",
      "batch_size": 38,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.030613543792987537
    },
    "75": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 70,
      "solver": "sgd",
      "batch_size": 112,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.039021024023282794
    },
    "76": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 25,
      "solver": "adam",
      "batch_size": 203,
      "learning_rate_init": 0.005333846468301899
    },
    "77": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 203,
      "solver": "sgd",
      "batch_size": 176,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.10470381716077017
    },
    "78": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 137,
      "solver": "sgd",
      "batch_size": 226,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.000276635839254943
    },
    "79": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 157,
      "solver": "sgd",
      "batch_size": 170,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.017863632189808402
    },
    "80": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 68,
      "solver": "sgd",
      "batch_size": 130,
      "learning_rate": "constant",
      "learning_rate_init": 0.022043359337621297
    },
    "81": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 85,
      "solver": "sgd",
      "batch_size": 156,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.24138499824590032
    },
    "82": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 146,
      "solver": "sgd",
      "batch_size": 99,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.02536129045410036
    },
    "83": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 120,
      "solver": "sgd",
      "batch_size": 163,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.11252900319265809
    },
    "84": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 179,
      "solver": "sgd",
      "batch_size": 169,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.03269190475564758
    },
    "85": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 65,
      "solver": "lbfgs"
    },
    "86": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 201,
      "solver": "sgd",
      "batch_size": 182,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.04636007567208619
    },
    "87": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 52,
      "solver": "adam",
      "batch_size": 171,
      "learning_rate_init": 0.32329214795564937
    },
    "88": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 72,
      "solver": "sgd",
      "batch_size": 174,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.04892888612742609
    },
    "89": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 76,
      "solver": "sgd",
      "batch_size": 155,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.23207329946744454
    },
    "90": {
      "activation": "logistic",
      "n_layer": 5,
      "n_neurons": 11,
      "solver": "lbfgs"
    },
    "91": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 173,
      "solver": "sgd",
      "batch_size": 153,
      "learning_rate": "constant",
      "learning_rate_init": 0.33889412381196216
    },
    "92": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 72,
      "solver": "sgd",
      "batch_size": 162,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.0273329242479713
    },
    "93": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 159,
      "solver": "sgd",
      "batch_size": 170,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.05816599164641307
    },
    "94": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 66,
      "solver": "sgd",
      "batch_size": 119,
      "learning_rate": "constant",
      "learning_rate_init": 0.049282661123152056
    },
    "95": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 8,
      "solver": "sgd",
      "batch_size": 47,
      "learning_rate": "constant",
      "learning_rate_init": 0.5365074485649823
    },
    "96": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 138,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.03766344267287229
    },
    "97": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 161,
      "solver": "sgd",
      "batch_size": 170,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.038616368040931874
    },
    "98": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 64,
      "solver": "sgd",
      "batch_size": 153,
      "learning_rate": "constant",
      "learning_rate_init": 0.09157307460175185
    },
    "99": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 139,
      "solver": "sgd",
      "batch_size": 153,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.029046260968348538
    },
    "100": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 125,
      "solver": "sgd",
      "batch_size": 238,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.0003681509644045078
    },
    "101": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 61,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.7304141951326927
    },
    "102": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 62,
      "solver": "sgd",
      "batch_size": 145,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.18963027120845377
    },
    "103": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 42,
      "solver": "sgd",
      "batch_size": 183,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.009833729618439832
    },
    "104": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 120,
      "solver": "sgd",
      "batch_size": 34,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.2935848408976571
    },
    "105": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 31,
      "solver": "sgd",
      "batch_size": 249,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.000701163310938968
    },
    "106": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 124,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.42402258040246
    },
    "107": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 68,
      "solver": "lbfgs"
    },
    "108": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 157,
      "solver": "sgd",
      "batch_size": 160,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.11458471507929699
    },
    "109": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 128,
      "solver": "sgd",
      "batch_size": 179,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.10463570836743545
    },
    "110": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 138,
      "solver": "sgd",
      "batch_size": 176,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.0701263019522426
    },
    "111": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19148577137404546
    },
    "112": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 87,
      "solver": "sgd",
      "batch_size": 158,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.34015339468897837
    },
    "113": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 106,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1592732280670577
    },
    "114": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 90,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.026882732357563714
    },
    "115": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 116,
      "solver": "sgd",
      "batch_size": 168,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.06519344153233782
    },
    "116": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 163,
      "solver": "sgd",
      "batch_size": 164,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.03414023704973973
    },
    "117": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 72,
      "solver": "sgd",
      "batch_size": 163,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19765022019496706
    },
    "118": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 243,
      "solver": "sgd",
      "batch_size": 178,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07178359222357442
    },
    "119": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 77,
      "solver": "sgd",
      "batch_size": 170,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.23207329946744454
    },
    "120": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 91,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.04892888612742609
    },
    "121": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 104,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.029894737499502586
    },
    "122": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 98,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1592732280670577
    },
    "123": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 93,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.31264568288634653
    },
    "124": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 100,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.02469649365646725
    },
    "125": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 130,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.44869088152062336
    },
    "126": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 127,
      "solver": "sgd",
      "batch_size": 176,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.10823925414321106
    },
    "127": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 225,
      "solver": "sgd",
      "batch_size": 176,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07044538480032572
    },
    "128": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 116,
      "solver": "sgd",
      "batch_size": 169,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.04452341335183066
    },
    "129": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 78,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.0943376112771313
    },
    "130": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 82,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.04111249500289979
    },
    "131": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 96,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.03286174056727582
    },
    "132": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 126,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.42845139939953886
    },
    "133": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 88,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.3576633849373979
    },
    "134": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 213,
      "solver": "adam",
      "batch_size": 119,
      "learning_rate_init": 0.0002708083791935435
    },
    "135": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 102,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.04466029950663082
    },
    "136": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 114,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1727839040028399
    },
    "137": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 188,
      "solver": "sgd",
      "batch_size": 144,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.14751898593375085
    },
    "138": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 225,
      "solver": "sgd",
      "batch_size": 142,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.10687331040984802
    },
    "139": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 209,
      "solver": "sgd",
      "batch_size": 124,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.09662702359007166
    },
    "140": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 31,
      "solver": "lbfgs"
    },
    "141": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 166,
      "solver": "sgd",
      "batch_size": 146,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1339091282868329
    },
    "142": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 182,
      "solver": "sgd",
      "batch_size": 141,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.31770020828331424
    },
    "143": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 175,
      "solver": "sgd",
      "batch_size": 145,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.51319619499909
    },
    "144": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 92,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.29435107550572176
    },
    "145": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 61,
      "solver": "sgd",
      "batch_size": 117,
      "learning_rate": "constant",
      "learning_rate_init": 0.27921966478272675
    },
    "146": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 63,
      "solver": "sgd",
      "batch_size": 136,
      "learning_rate": "constant",
      "learning_rate_init": 0.29448889511261245
    },
    "147": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 179,
      "solver": "sgd",
      "batch_size": 108,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.6795763633990239
    },
    "148": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 116,
      "solver": "sgd",
      "batch_size": 152,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.3597570628112556
    },
    "149": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 159,
      "solver": "sgd",
      "batch_size": 141,
      "learning_rate": "constant",
      "learning_rate_init": 0.5580844767999356
    },
    "150": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 97,
      "solver": "sgd",
      "batch_size": 141,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.32322306482331253
    },
    "151": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 207,
      "solver": "sgd",
      "batch_size": 138,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.4402088286767232
    },
    "152": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 63,
      "solver": "sgd",
      "batch_size": 49,
      "learning_rate": "constant",
      "learning_rate_init": 0.462765867930737
    },
    "153": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 207,
      "solver": "sgd",
      "batch_size": 117,
      "learning_rate": "constant",
      "learning_rate_init": 0.37679826514484316
    },
    "154": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 116,
      "solver": "adam",
      "batch_size": 196,
      "learning_rate_init": 0.00011402656999149273
    },
    "155": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 116,
      "solver": "sgd",
      "batch_size": 152,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.6465572989887257
    },
    "156": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 57,
      "solver": "sgd",
      "batch_size": 74,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.4856412423076429
    },
    "157": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 173,
      "solver": "sgd",
      "batch_size": 153,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.26211362910749225
    },
    "158": {
      "activation": "tanh",
      "n_layer": 5,
      "n_neurons": 160,
      "solver": "adam",
      "batch_size": 47,
      "learning_rate_init": 0.4499190535972451
    },
    "159": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 132,
      "solver": "sgd",
      "batch_size": 147,
      "learning_rate": "constant",
      "learning_rate_init": 0.556629933725284
    },
    "160": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 241,
      "solver": "sgd",
      "batch_size": 210,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.11824387614150647
    },
    "161": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 69,
      "solver": "sgd",
      "batch_size": 136,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.3596886909138251
    },
    "162": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 67,
      "solver": "sgd",
      "batch_size": 297,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.11488935641762549
    },
    "163": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 89,
      "solver": "sgd",
      "batch_size": 143,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.30887841405196403
    },
    "164": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 175,
      "solver": "sgd",
      "batch_size": 147,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.6041621965295579
    },
    "165": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 191,
      "solver": "sgd",
      "batch_size": 153,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.8017583184686443
    },
    "166": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 124,
      "solver": "sgd",
      "batch_size": 71,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.30626275412581333
    },
    "167": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 15,
      "solver": "sgd",
      "batch_size": 298,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.00029743887929727076
    },
    "168": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 71,
      "solver": "sgd",
      "batch_size": 81,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.462765867930737
    },
    "169": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 174,
      "solver": "adam",
      "batch_size": 217,
      "learning_rate_init": 0.21378164354967155
    },
    "170": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 182,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "constant",
      "learning_rate_init": 0.19561361122443274
    },
    "171": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 197,
      "solver": "adam",
      "batch_size": 164,
      "learning_rate_init": 0.34602768176586185
    },
    "172": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 173,
      "solver": "sgd",
      "batch_size": 159,
      "learning_rate": "constant",
      "learning_rate_init": 0.25013386495785256
    },
    "173": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 219,
      "solver": "sgd",
      "batch_size": 157,
      "learning_rate": "constant",
      "learning_rate_init": 0.4409733371259267
    },
    "174": {
      "activation": "relu",
      "n_layer": 4,
      "n_neurons": 82,
      "solver": "lbfgs"
    },
    "175": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 169,
      "solver": "sgd",
      "batch_size": 203,
      "learning_rate": "constant",
      "learning_rate_init": 0.4070236097800452
    },
    "176": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 222,
      "solver": "sgd",
      "batch_size": 150,
      "learning_rate": "constant",
      "learning_rate_init": 0.49594055855769514
    },
    "177": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 36,
      "solver": "adam",
      "batch_size": 117,
      "learning_rate_init": 0.011456934128798073
    },
    "178": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 175,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "constant",
      "learning_rate_init": 0.5677258743284241
    },
    "179": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 95,
      "solver": "adam",
      "batch_size": 275,
      "learning_rate_init": 0.0017527562377996201
    },
    "180": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 12,
      "solver": "lbfgs"
    },
    "181": {
      "activation": "tanh",
      "n_layer": 2,
      "n_neurons": 150,
      "solver": "adam",
      "batch_size": 300,
      "learning_rate_init": 0.004548059515825623
    },
    "182": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 173,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "constant",
      "learning_rate_init": 0.4574638681344198
    },
    "183": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 174,
      "solver": "sgd",
      "batch_size": 211,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.4285631506418612
    },
    "184": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.5123868798238849
    },
    "185": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 181,
      "solver": "sgd",
      "batch_size": 188,
      "learning_rate": "constant",
      "learning_rate_init": 0.829292859227925
    },
    "186": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 184,
      "solver": "sgd",
      "batch_size": 174,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.3179359325601291
    },
    "187": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 29,
      "solver": "sgd",
      "batch_size": 189,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.5203129427478289
    },
    "188": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 11,
      "solver": "lbfgs"
    },
    "189": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 173,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "constant",
      "learning_rate_init": 0.50082226127925
    },
    "190": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 181,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.30144496024166595
    },
    "191": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 169,
      "solver": "sgd",
      "batch_size": 210,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.29468756684797703
    },
    "192": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 174,
      "solver": "sgd",
      "batch_size": 210,
      "learning_rate": "constant",
      "learning_rate_init": 0.3683715673544255
    },
    "193": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 186,
      "solver": "sgd",
      "batch_size": 188,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20773019129219814
    },
    "194": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 197,
      "solver": "sgd",
      "batch_size": 201,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20115385734735147
    },
    "195": {
      "activation": "logistic",
      "n_layer": 2,
      "n_neurons": 194,
      "solver": "sgd",
      "batch_size": 194,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19561361122443274
    },
    "196": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 183,
      "learning_rate": "constant",
      "learning_rate_init": 0.21026213683121267
    },
    "197": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 191,
      "solver": "sgd",
      "batch_size": 189,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19402451947895036
    },
    "198": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 195,
      "solver": "sgd",
      "batch_size": 182,
      "learning_rate": "constant",
      "learning_rate_init": 0.19148577137404546
    },
    "199": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 191,
      "solver": "sgd",
      "batch_size": 169,
      "learning_rate": "constant",
      "learning_rate_init": 0.1888451523487793
    },
    "200": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 152,
      "solver": "lbfgs"
    },
    "201": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 166,
      "solver": "sgd",
      "batch_size": 170,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07879291103946226
    },
    "202": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 183,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.0782879381931692
    },
    "203": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 213,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07911888130863547
    },
    "204": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 186,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07947418115464555
    },
    "205": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 187,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07650970552602057
    },
    "206": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 129,
      "solver": "lbfgs"
    },
    "207": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 165,
      "solver": "sgd",
      "batch_size": 233,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07626453349095194
    },
    "208": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 166,
      "solver": "sgd",
      "batch_size": 224,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.07770959368647609
    },
    "209": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 208,
      "solver": "sgd",
      "batch_size": 174,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20567676109887903
    },
    "210": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 210,
      "solver": "sgd",
      "batch_size": 219,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20306240005257523
    },
    "211": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 54,
      "solver": "adam",
      "batch_size": 220,
      "learning_rate_init": 0.6665719018993895
    },
    "212": {
      "activation": "relu",
      "n_layer": 5,
      "n_neurons": 64,
      "solver": "sgd",
      "batch_size": 33,
      "learning_rate": "invscaling",
      "learning_rate_init": 0.9043828152081068
    },
    "213": {
      "activation": "relu",
      "n_layer": 2,
      "n_neurons": 13,
      "solver": "adam",
      "batch_size": 231,
      "learning_rate_init": 0.3157689680069812
    },
    "214": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 181,
      "solver": "sgd",
      "batch_size": 219,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20115385734735147
    },
    "215": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 171,
      "solver": "sgd",
      "batch_size": 207,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.2016025762348964
    },
    "216": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 190,
      "solver": "sgd",
      "batch_size": 189,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20332447509365065
    },
    "217": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 162,
      "solver": "sgd",
      "batch_size": 217,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1809457851415658
    },
    "218": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 165,
      "solver": "sgd",
      "batch_size": 176,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18683981793287688
    },
    "219": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 191,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18946475371340826
    },
    "220": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 207,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19389398683179138
    },
    "221": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 194,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19506085956026756
    },
    "222": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 163,
      "solver": "sgd",
      "batch_size": 239,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1901860830344783
    },
    "223": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 222,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18988815474603343
    },
    "224": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 165,
      "solver": "sgd",
      "batch_size": 198,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19091576782836894
    },
    "225": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 186,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18513743750221973
    },
    "226": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 165,
      "solver": "sgd",
      "batch_size": 248,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18588990982612896
    },
    "227": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 165,
      "solver": "sgd",
      "batch_size": 294,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18988815474603343
    },
    "228": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 240,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.17362941936849988
    },
    "229": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 169,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1759725754604633
    },
    "230": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 165,
      "solver": "sgd",
      "batch_size": 188,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1739924555773688
    },
    "231": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 49,
      "solver": "adam",
      "batch_size": 204,
      "learning_rate_init": 0.009450655833952928
    },
    "232": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 235,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19103272208801217
    },
    "233": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 211,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19561361122443274
    },
    "234": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 270,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1809457851415658
    },
    "235": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 281,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18729441192492832
    },
    "236": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 166,
      "solver": "sgd",
      "batch_size": 189,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18023325706589627
    },
    "237": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 170,
      "solver": "sgd",
      "batch_size": 183,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18882834752786232
    },
    "238": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 259,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19438011045926964
    },
    "239": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 164,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.18815344029508985
    },
    "240": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 19,
      "solver": "lbfgs"
    },
    "241": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.12747371142805428
    },
    "242": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1261925365569622
    },
    "243": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 169,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1339093552335249
    },
    "244": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 169,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1519806375718866
    },
    "245": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 169,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1472496099894898
    },
    "246": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.15368805914903164
    },
    "247": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 172,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.13184279254474457
    },
    "248": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 8,
      "solver": "lbfgs"
    },
    "249": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 170,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20567676109887903
    },
    "250": {
      "activation": "logistic",
      "n_layer": 4,
      "n_neurons": 15,
      "solver": "lbfgs"
    },
    "251": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 220,
      "solver": "sgd",
      "batch_size": 172,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1915153575732991
    },
    "252": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 170,
      "solver": "sgd",
      "batch_size": 140,
      "learning_rate": "constant",
      "learning_rate_init": 0.18598009607317315
    },
    "253": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 215,
      "solver": "sgd",
      "batch_size": 172,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19091576782836894
    },
    "254": {
      "activation": "logistic",
      "n_layer": 3,
      "n_neurons": 84,
      "solver": "sgd",
      "batch_size": 185,
      "learning_rate": "constant",
      "learning_rate_init": 0.2460125861194306
    },
    "255": {
      "activation": "tanh",
      "n_layer": 4,
      "n_neurons": 241,
      "solver": "sgd",
      "batch_size": 268,
      "learning_rate": "constant",
      "learning_rate_init": 0.0001360282686530385
    },
    "256": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 161,
      "learning_rate": "constant",
      "learning_rate_init": 0.18970281865722854
    },
    "257": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1970954961960338
    },
    "258": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 182,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.1959735775906409
    },
    "259": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 181,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19622632425740386
    },
    "260": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 182,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19676662946025156
    },
    "261": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.19587709671849976
    },
    "262": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 127,
      "solver": "lbfgs"
    },
    "263": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 163,
      "solver": "sgd",
      "batch_size": 177,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.196741599877494
    },
    "264": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 175,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.20567676109887903
    },
    "265": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "constant",
      "learning_rate_init": 0.19103272208801217
    },
    "266": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 169,
      "solver": "sgd",
      "batch_size": 177,
      "learning_rate": "constant",
      "learning_rate_init": 0.1931912708801096
    },
    "267": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 177,
      "learning_rate": "constant",
      "learning_rate_init": 0.19264099250534128
    },
    "268": {
      "activation": "tanh",
      "n_layer": 3,
      "n_neurons": 36,
      "solver": "adam",
      "batch_size": 280,
      "learning_rate_init": 0.0561574244854596
    },
    "269": {
      "activation": "relu",
      "n_layer": 3,
      "n_neurons": 21,
      "solver": "sgd",
      "batch_size": 188,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.0001620422060584694
    },
    "270": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 172,
      "learning_rate": "constant",
      "learning_rate_init": 0.1904846259397435
    },
    "271": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 171,
      "learning_rate": "constant",
      "learning_rate_init": 0.19215619841767276
    },
    "272": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 168,
      "solver": "sgd",
      "batch_size": 173,
      "learning_rate": "constant",
      "learning_rate_init": 0.19133927231681366
    },
    "273": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 186,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.2971477231437092
    },
    "274": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 185,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.29293496669657576
    },
    "275": {
      "activation": "relu",
      "n_layer": 1,
      "n_neurons": 19,
      "solver": "sgd",
      "batch_size": 30,
      "learning_rate": "constant",
      "learning_rate_init": 0.0008053137452251421
    },
    "276": {
      "activation": "logistic",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 186,
      "learning_rate": "adaptive",
      "learning_rate_init": 0.3418726407780122
    },
    "277": {
      "activation": "tanh",
      "n_layer": 1,
      "n_neurons": 167,
      "solver": "sgd",
      "batch_size": 184,
      "learning_rate": "constant",
      "learning_rate_init": 0.20143401771119865
    }
  },
  "config_origins": {
    "1": "Initial Design: Random",
    "2": "Initial Design: Random",
    "3": "Initial Design: Random",
    "4": "Initial Design: Random",
    "5": "Initial Design: Random",
    "6": null,
    "7": null,
    "8": null,
    "9": null,
    "10": "Acquisition Function Maximizer: Random Search (sorted)",
    "11": "Acquisition Function Maximizer: Random Search (sorted)",
    "12": "Acquisition Function Maximizer: Local Search",
    "13": "Acquisition Function Maximizer: Local Search",
    "14": "Acquisition Function Maximizer: Local Search",
    "15": "Acquisition Function Maximizer: Local Search",
    "16": "Acquisition Function Maximizer: Local Search",
    "17": "Acquisition Function Maximizer: Random Search (sorted)",
    "18": "Acquisition Function Maximizer: Random Search (sorted)",
    "19": "Acquisition Function Maximizer: Local Search",
    "20": "Acquisition Function Maximizer: Local Search",
    "21": "Acquisition Function Maximizer: Local Search",
    "22": "Acquisition Function Maximizer: Local Search",
    "23": "Random Search",
    "24": "Random Search",
    "25": "Random Search",
    "26": "Acquisition Function Maximizer: Local Search",
    "27": "Acquisition Function Maximizer: Local Search",
    "28": "Acquisition Function Maximizer: Local Search",
    "29": "Acquisition Function Maximizer: Local Search",
    "30": "Acquisition Function Maximizer: Local Search",
    "31": "Acquisition Function Maximizer: Local Search",
    "32": "Acquisition Function Maximizer: Local Search",
    "33": "Random Search",
    "34": "Acquisition Function Maximizer: Local Search",
    "35": "Random Search",
    "36": "Acquisition Function Maximizer: Local Search",
    "37": "Acquisition Function Maximizer: Local Search",
    "38": "Acquisition Function Maximizer: Local Search",
    "39": "Acquisition Function Maximizer: Local Search",
    "40": "Acquisition Function Maximizer: Local Search",
    "41": "Acquisition Function Maximizer: Local Search",
    "42": "Acquisition Function Maximizer: Local Search",
    "43": "Random Search",
    "44": "Acquisition Function Maximizer: Local Search",
    "45": "Acquisition Function Maximizer: Local Search",
    "46": "Acquisition Function Maximizer: Local Search",
    "47": "Acquisition Function Maximizer: Local Search",
    "48": "Acquisition Function Maximizer: Local Search",
    "49": "Acquisition Function Maximizer: Local Search",
    "50": "Acquisition Function Maximizer: Local Search",
    "51": "Acquisition Function Maximizer: Local Search",
    "52": "Random Search",
    "53": "Acquisition Function Maximizer: Local Search",
    "54": "Acquisition Function Maximizer: Local Search",
    "55": "Acquisition Function Maximizer: Local Search",
    "56": "Random Search",
    "57": "Acquisition Function Maximizer: Random Search (sorted)",
    "58": "Acquisition Function Maximizer: Random Search (sorted)",
    "59": "Acquisition Function Maximizer: Random Search (sorted)",
    "60": "Acquisition Function Maximizer: Random Search (sorted)",
    "61": "Acquisition Function Maximizer: Random Search (sorted)",
    "62": "Random Search",
    "63": "Acquisition Function Maximizer: Random Search (sorted)",
    "64": "Random Search",
    "65": "Acquisition Function Maximizer: Random Search (sorted)",
    "66": "Acquisition Function Maximizer: Random Search (sorted)",
    "67": "Acquisition Function Maximizer: Local Search",
    "68": "Acquisition Function Maximizer: Local Search",
    "69": "Random Search",
    "70": "Random Search",
    "71": "Acquisition Function Maximizer: Local Search",
    "72": "Random Search",
    "73": "Random Search",
    "74": "Acquisition Function Maximizer: Local Search",
    "75": "Acquisition Function Maximizer: Local Search",
    "76": "Random Search",
    "77": "Acquisition Function Maximizer: Local Search",
    "78": "Random Search",
    "79": "Acquisition Function Maximizer: Local Search",
    "80": "Acquisition Function Maximizer: Local Search",
    "81": "Acquisition Function Maximizer: Local Search",
    "82": "Acquisition Function Maximizer: Local Search",
    "83": "Acquisition Function Maximizer: Local Search",
    "84": "Acquisition Function Maximizer: Local Search",
    "85": "Random Search",
    "86": "Acquisition Function Maximizer: Local Search",
    "87": "Random Search",
    "88": "Acquisition Function Maximizer: Local Search",
    "89": "Acquisition Function Maximizer: Local Search",
    "90": "Random Search",
    "91": "Acquisition Function Maximizer: Local Search",
    "92": "Acquisition Function Maximizer: Local Search",
    "93": "Acquisition Function Maximizer: Local Search",
    "94": "Acquisition Function Maximizer: Local Search",
    "95": "Random Search",
    "96": "Acquisition Function Maximizer: Local Search",
    "97": "Acquisition Function Maximizer: Local Search",
    "98": "Acquisition Function Maximizer: Local Search",
    "99": "Acquisition Function Maximizer: Local Search",
    "100": "Random Search",
    "101": "Acquisition Function Maximizer: Local Search",
    "102": "Acquisition Function Maximizer: Local Search",
    "103": "Random Search",
    "104": "Acquisition Function Maximizer: Local Search",
    "105": "Random Search",
    "106": "Acquisition Function Maximizer: Local Search",
    "107": "Random Search",
    "108": "Acquisition Function Maximizer: Local Search",
    "109": "Acquisition Function Maximizer: Local Search",
    "110": "Acquisition Function Maximizer: Local Search",
    "111": "Acquisition Function Maximizer: Local Search",
    "112": "Acquisition Function Maximizer: Local Search",
    "113": "Acquisition Function Maximizer: Local Search",
    "114": "Acquisition Function Maximizer: Local Search",
    "115": "Acquisition Function Maximizer: Local Search",
    "116": "Acquisition Function Maximizer: Local Search",
    "117": "Acquisition Function Maximizer: Local Search",
    "118": "Acquisition Function Maximizer: Local Search",
    "119": "Acquisition Function Maximizer: Local Search",
    "120": "Acquisition Function Maximizer: Local Search",
    "121": "Acquisition Function Maximizer: Local Search",
    "122": "Acquisition Function Maximizer: Local Search",
    "123": "Acquisition Function Maximizer: Local Search",
    "124": "Acquisition Function Maximizer: Local Search",
    "125": "Acquisition Function Maximizer: Local Search",
    "126": "Acquisition Function Maximizer: Local Search",
    "127": "Acquisition Function Maximizer: Local Search",
    "128": "Acquisition Function Maximizer: Local Search",
    "129": "Acquisition Function Maximizer: Local Search",
    "130": "Acquisition Function Maximizer: Local Search",
    "131": "Acquisition Function Maximizer: Local Search",
    "132": "Acquisition Function Maximizer: Local Search",
    "133": "Acquisition Function Maximizer: Local Search",
    "134": "Random Search",
    "135": "Acquisition Function Maximizer: Local Search",
    "136": "Acquisition Function Maximizer: Local Search",
    "137": "Acquisition Function Maximizer: Local Search",
    "138": "Acquisition Function Maximizer: Local Search",
    "139": "Acquisition Function Maximizer: Local Search",
    "140": "Random Search",
    "141": "Acquisition Function Maximizer: Local Search",
    "142": "Acquisition Function Maximizer: Local Search",
    "143": "Acquisition Function Maximizer: Local Search",
    "144": "Acquisition Function Maximizer: Local Search",
    "145": "Acquisition Function Maximizer: Local Search",
    "146": "Acquisition Function Maximizer: Local Search",
    "147": "Acquisition Function Maximizer: Local Search",
    "148": "Acquisition Function Maximizer: Local Search",
    "149": "Acquisition Function Maximizer: Local Search",
    "150": "Acquisition Function Maximizer: Local Search",
    "151": "Acquisition Function Maximizer: Local Search",
    "152": "Acquisition Function Maximizer: Local Search",
    "153": "Acquisition Function Maximizer: Local Search",
    "154": "Random Search",
    "155": "Acquisition Function Maximizer: Local Search",
    "156": "Acquisition Function Maximizer: Local Search",
    "157": "Acquisition Function Maximizer: Local Search",
    "158": "Random Search",
    "159": "Acquisition Function Maximizer: Local Search",
    "160": "Random Search",
    "161": "Acquisition Function Maximizer: Local Search",
    "162": "Random Search",
    "163": "Acquisition Function Maximizer: Local Search",
    "164": "Acquisition Function Maximizer: Local Search",
    "165": "Acquisition Function Maximizer: Local Search",
    "166": "Acquisition Function Maximizer: Local Search",
    "167": "Random Search",
    "168": "Acquisition Function Maximizer: Local Search",
    "169": "Acquisition Function Maximizer: Local Search",
    "170": "Acquisition Function Maximizer: Local Search",
    "171": "Acquisition Function Maximizer: Local Search",
    "172": "Acquisition Function Maximizer: Local Search",
    "173": "Acquisition Function Maximizer: Local Search",
    "174": "Random Search",
    "175": "Acquisition Function Maximizer: Local Search",
    "176": "Acquisition Function Maximizer: Local Search",
    "177": "Random Search",
    "178": "Acquisition Function Maximizer: Local Search",
    "179": "Random Search",
    "180": "Random Search",
    "181": "Random Search",
    "182": "Acquisition Function Maximizer: Local Search",
    "183": "Acquisition Function Maximizer: Local Search",
    "184": "Acquisition Function Maximizer: Local Search",
    "185": "Acquisition Function Maximizer: Local Search",
    "186": "Acquisition Function Maximizer: Local Search",
    "187": "Random Search",
    "188": "Random Search",
    "189": "Acquisition Function Maximizer: Local Search",
    "190": "Acquisition Function Maximizer: Local Search",
    "191": "Acquisition Function Maximizer: Local Search",
    "192": "Acquisition Function Maximizer: Local Search",
    "193": "Acquisition Function Maximizer: Local Search",
    "194": "Acquisition Function Maximizer: Local Search",
    "195": "Acquisition Function Maximizer: Local Search",
    "196": "Acquisition Function Maximizer: Local Search",
    "197": "Acquisition Function Maximizer: Local Search",
    "198": "Acquisition Function Maximizer: Local Search",
    "199": "Acquisition Function Maximizer: Local Search",
    "200": "Random Search",
    "201": "Acquisition Function Maximizer: Local Search",
    "202": "Acquisition Function Maximizer: Local Search",
    "203": "Acquisition Function Maximizer: Local Search",
    "204": "Acquisition Function Maximizer: Local Search",
    "205": "Acquisition Function Maximizer: Local Search",
    "206": "Random Search",
    "207": "Acquisition Function Maximizer: Local Search",
    "208": "Acquisition Function Maximizer: Local Search",
    "209": "Acquisition Function Maximizer: Local Search",
    "210": "Acquisition Function Maximizer: Local Search",
    "211": "Random Search",
    "212": "Random Search",
    "213": "Random Search",
    "214": "Acquisition Function Maximizer: Local Search",
    "215": "Acquisition Function Maximizer: Local Search",
    "216": "Acquisition Function Maximizer: Local Search",
    "217": "Acquisition Function Maximizer: Local Search",
    "218": "Acquisition Function Maximizer: Local Search",
    "219": "Acquisition Function Maximizer: Local Search",
    "220": "Acquisition Function Maximizer: Local Search",
    "221": "Acquisition Function Maximizer: Local Search",
    "222": "Acquisition Function Maximizer: Local Search",
    "223": "Acquisition Function Maximizer: Local Search",
    "224": "Acquisition Function Maximizer: Local Search",
    "225": "Acquisition Function Maximizer: Local Search",
    "226": "Acquisition Function Maximizer: Local Search",
    "227": "Acquisition Function Maximizer: Local Search",
    "228": "Acquisition Function Maximizer: Local Search",
    "229": "Acquisition Function Maximizer: Local Search",
    "230": "Acquisition Function Maximizer: Local Search",
    "231": "Random Search",
    "232": "Acquisition Function Maximizer: Local Search",
    "233": "Acquisition Function Maximizer: Local Search",
    "234": "Acquisition Function Maximizer: Local Search",
    "235": "Acquisition Function Maximizer: Local Search",
    "236": "Acquisition Function Maximizer: Local Search",
    "237": "Acquisition Function Maximizer: Local Search",
    "238": "Acquisition Function Maximizer: Local Search",
    "239": "Acquisition Function Maximizer: Local Search",
    "240": "Random Search",
    "241": "Acquisition Function Maximizer: Local Search",
    "242": "Acquisition Function Maximizer: Local Search",
    "243": "Acquisition Function Maximizer: Local Search",
    "244": "Acquisition Function Maximizer: Local Search",
    "245": "Acquisition Function Maximizer: Local Search",
    "246": "Acquisition Function Maximizer: Local Search",
    "247": "Acquisition Function Maximizer: Local Search",
    "248": "Random Search",
    "249": "Acquisition Function Maximizer: Local Search",
    "250": "Random Search",
    "251": "Acquisition Function Maximizer: Local Search",
    "252": "Acquisition Function Maximizer: Local Search",
    "253": "Acquisition Function Maximizer: Local Search",
    "254": "Random Search",
    "255": "Random Search",
    "256": "Acquisition Function Maximizer: Local Search",
    "257": "Acquisition Function Maximizer: Local Search",
    "258": "Acquisition Function Maximizer: Local Search",
    "259": "Acquisition Function Maximizer: Local Search",
    "260": "Acquisition Function Maximizer: Local Search",
    "261": "Acquisition Function Maximizer: Local Search",
    "262": "Random Search",
    "263": "Acquisition Function Maximizer: Local Search",
    "264": "Acquisition Function Maximizer: Local Search",
    "265": "Acquisition Function Maximizer: Local Search",
    "266": "Acquisition Function Maximizer: Local Search",
    "267": "Acquisition Function Maximizer: Local Search",
    "268": "Random Search",
    "269": "Random Search",
    "270": "Acquisition Function Maximizer: Local Search",
    "271": "Acquisition Function Maximizer: Local Search",
    "272": "Acquisition Function Maximizer: Local Search",
    "273": "Acquisition Function Maximizer: Local Search",
    "274": "Acquisition Function Maximizer: Local Search",
    "275": "Random Search",
    "276": "Acquisition Function Maximizer: Local Search",
    "277": "Acquisition Function Maximizer: Local Search"
  }
}