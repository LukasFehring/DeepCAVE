from typing import Any


class Trial:
    """
    Trial class. Is a convinient wrapper around the trial_id string. Makes it easier for the user to log metrics
    within the context of a trial.

    In mlflow a run (here trial) is also managed by the state. Assuming only one run is performed at a time, this
    unburdens the user from tracking the runs/trials. In a multi-threading context this can lead to problems, when
    the state is set by two concurrent threads.

    The design decision here was to allow local objects (trial objects) to be used as a reference to a trial entry.
    The trial_id is unique (not theoretically guaranteed, but good enough), and prevents to thread from acquiring the
    same save location in memory.
    """
    def __init__(self, trial_id, store):
        """
        The Trial object is generated by the store to reference the trial entry. The Trial object has an id,
        which is used internally as reference. The trial instance also has a link to store, to log the metric for the
        trial_id.

        Parameters
        ----------
        trial_id
            A hash string generated by store as reference.
        store
            A reference to the store object that created the Trial object.
        """
        self.trial_id = trial_id
        self.store = store

    def log_metric(self, name: str, output: Any) -> None:
        """
        A wrapper around stor.log_metric. log_metric requires the trial_id. The Trial object abstracts that away,
        by setting the trial_id for the user.

        Parameters
        ----------
        name
        output

        Returns
        -------
            None
        """
        self.store.log_metric(self.trial_id, name, output)
